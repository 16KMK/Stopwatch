
Stop Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002238  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002344  08002344  00012344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023b0  080023b0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  080023b0  080023b0  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023b0  080023b0  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023b0  080023b0  000123b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023b4  080023b4  000123b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080023b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  200000b0  08002468  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002468  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e39  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013b0  00000000  00000000  00023f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000500  00000000  00000000  000252c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000438  00000000  00000000  000257c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017577  00000000  00000000  00025c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d67  00000000  00000000  0003d177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000805ce  00000000  00000000  00043ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c44ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001568  00000000  00000000  000c44fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800232c 	.word	0x0800232c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	0800232c 	.word	0x0800232c

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fd51 	bl	8000bf8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f8dd 	bl	8000314 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 f921 	bl	80003a0 <MX_GPIO_Init>

	/* USER CODE BEGIN 2 */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800015e:	4b63      	ldr	r3, [pc, #396]	; (80002ec <main+0x1a0>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	4a62      	ldr	r2, [pc, #392]	; (80002ec <main+0x1a0>)
 8000164:	f043 0304 	orr.w	r3, r3, #4
 8000168:	6193      	str	r3, [r2, #24]
 800016a:	4b60      	ldr	r3, [pc, #384]	; (80002ec <main+0x1a0>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	f003 0304 	and.w	r3, r3, #4
 8000172:	60bb      	str	r3, [r7, #8]
 8000174:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000176:	4b5d      	ldr	r3, [pc, #372]	; (80002ec <main+0x1a0>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4a5c      	ldr	r2, [pc, #368]	; (80002ec <main+0x1a0>)
 800017c:	f043 0308 	orr.w	r3, r3, #8
 8000180:	6193      	str	r3, [r2, #24]
 8000182:	4b5a      	ldr	r3, [pc, #360]	; (80002ec <main+0x1a0>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	f003 0308 	and.w	r3, r3, #8
 800018a:	607b      	str	r3, [r7, #4]
 800018c:	687b      	ldr	r3, [r7, #4]
	Alcd_Init(&lcd1, 2, 16);
 800018e:	2210      	movs	r2, #16
 8000190:	2102      	movs	r1, #2
 8000192:	4857      	ldr	r0, [pc, #348]	; (80002f0 <main+0x1a4>)
 8000194:	f000 fb02 	bl	800079c <Alcd_Init>
	Keypad_Matrix_init(&matrix1);
 8000198:	4856      	ldr	r0, [pc, #344]	; (80002f4 <main+0x1a8>)
 800019a:	f000 fcd2 	bl	8000b42 <Keypad_Matrix_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Keypad_Matrix_Refresh(&matrix1);
 800019e:	4855      	ldr	r0, [pc, #340]	; (80002f4 <main+0x1a8>)
 80001a0:	f000 fcde 	bl	8000b60 <Keypad_Matrix_Refresh>
		//Key_0 for Start
		if (Keypad_Matrix_ReadKey(&matrix1, 0)) {
 80001a4:	2100      	movs	r1, #0
 80001a6:	4853      	ldr	r0, [pc, #332]	; (80002f4 <main+0x1a8>)
 80001a8:	f000 fd0f 	bl	8000bca <Keypad_Matrix_ReadKey>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d003      	beq.n	80001ba <main+0x6e>
			x = 0;
 80001b2:	4b51      	ldr	r3, [pc, #324]	; (80002f8 <main+0x1ac>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	701a      	strb	r2, [r3, #0]
 80001b8:	e014      	b.n	80001e4 <main+0x98>
		}

		//Key_1 for stop
		else if (Keypad_Matrix_ReadKey(&matrix1, 1)) {
 80001ba:	2101      	movs	r1, #1
 80001bc:	484d      	ldr	r0, [pc, #308]	; (80002f4 <main+0x1a8>)
 80001be:	f000 fd04 	bl	8000bca <Keypad_Matrix_ReadKey>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d003      	beq.n	80001d0 <main+0x84>
			x = 1;
 80001c8:	4b4b      	ldr	r3, [pc, #300]	; (80002f8 <main+0x1ac>)
 80001ca:	2201      	movs	r2, #1
 80001cc:	701a      	strb	r2, [r3, #0]
 80001ce:	e009      	b.n	80001e4 <main+0x98>
		}

		//Key_2 for clear
		else if (Keypad_Matrix_ReadKey(&matrix1, 2)) {
 80001d0:	2102      	movs	r1, #2
 80001d2:	4848      	ldr	r0, [pc, #288]	; (80002f4 <main+0x1a8>)
 80001d4:	f000 fcf9 	bl	8000bca <Keypad_Matrix_ReadKey>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d002      	beq.n	80001e4 <main+0x98>
			x = 2;
 80001de:	4b46      	ldr	r3, [pc, #280]	; (80002f8 <main+0x1ac>)
 80001e0:	2202      	movs	r2, #2
 80001e2:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(100);
 80001e4:	2064      	movs	r0, #100	; 0x64
 80001e6:	f000 fd69 	bl	8000cbc <HAL_Delay>
		uint8_t length = sprintf(str, "%02d:%02d:%02d:%02d", HH, MM, SS, MS);
 80001ea:	4b44      	ldr	r3, [pc, #272]	; (80002fc <main+0x1b0>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	4619      	mov	r1, r3
 80001f0:	4b43      	ldr	r3, [pc, #268]	; (8000300 <main+0x1b4>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	4618      	mov	r0, r3
 80001f6:	4b43      	ldr	r3, [pc, #268]	; (8000304 <main+0x1b8>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	461a      	mov	r2, r3
 80001fc:	4b42      	ldr	r3, [pc, #264]	; (8000308 <main+0x1bc>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	9301      	str	r3, [sp, #4]
 8000202:	9200      	str	r2, [sp, #0]
 8000204:	4603      	mov	r3, r0
 8000206:	460a      	mov	r2, r1
 8000208:	4940      	ldr	r1, [pc, #256]	; (800030c <main+0x1c0>)
 800020a:	4841      	ldr	r0, [pc, #260]	; (8000310 <main+0x1c4>)
 800020c:	f001 fc14 	bl	8001a38 <siprintf>
 8000210:	4603      	mov	r3, r0
 8000212:	73fb      	strb	r3, [r7, #15]
		Alcd_PutAt_n(&lcd1, 0, 0, str, length);
 8000214:	7bfb      	ldrb	r3, [r7, #15]
 8000216:	9300      	str	r3, [sp, #0]
 8000218:	4b3d      	ldr	r3, [pc, #244]	; (8000310 <main+0x1c4>)
 800021a:	2200      	movs	r2, #0
 800021c:	2100      	movs	r1, #0
 800021e:	4834      	ldr	r0, [pc, #208]	; (80002f0 <main+0x1a4>)
 8000220:	f000 fb77 	bl	8000912 <Alcd_PutAt_n>
		if (x == 1) {
 8000224:	4b34      	ldr	r3, [pc, #208]	; (80002f8 <main+0x1ac>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b01      	cmp	r3, #1
 800022a:	d148      	bne.n	80002be <main+0x172>
			MS++;
 800022c:	4b36      	ldr	r3, [pc, #216]	; (8000308 <main+0x1bc>)
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	3301      	adds	r3, #1
 8000232:	b2da      	uxtb	r2, r3
 8000234:	4b34      	ldr	r3, [pc, #208]	; (8000308 <main+0x1bc>)
 8000236:	701a      	strb	r2, [r3, #0]
			if (MS == 10) {
 8000238:	4b33      	ldr	r3, [pc, #204]	; (8000308 <main+0x1bc>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b0a      	cmp	r3, #10
 800023e:	d108      	bne.n	8000252 <main+0x106>
				SS++;
 8000240:	4b30      	ldr	r3, [pc, #192]	; (8000304 <main+0x1b8>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	3301      	adds	r3, #1
 8000246:	b2da      	uxtb	r2, r3
 8000248:	4b2e      	ldr	r3, [pc, #184]	; (8000304 <main+0x1b8>)
 800024a:	701a      	strb	r2, [r3, #0]
				MS = 0;
 800024c:	4b2e      	ldr	r3, [pc, #184]	; (8000308 <main+0x1bc>)
 800024e:	2200      	movs	r2, #0
 8000250:	701a      	strb	r2, [r3, #0]
			}

			if (SS == 59)
 8000252:	4b2c      	ldr	r3, [pc, #176]	; (8000304 <main+0x1b8>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b3b      	cmp	r3, #59	; 0x3b
 8000258:	d10b      	bne.n	8000272 <main+0x126>

			{
				MM++;
 800025a:	4b29      	ldr	r3, [pc, #164]	; (8000300 <main+0x1b4>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	3301      	adds	r3, #1
 8000260:	b2da      	uxtb	r2, r3
 8000262:	4b27      	ldr	r3, [pc, #156]	; (8000300 <main+0x1b4>)
 8000264:	701a      	strb	r2, [r3, #0]
				MS = 0;
 8000266:	4b28      	ldr	r3, [pc, #160]	; (8000308 <main+0x1bc>)
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]
				SS = 0;
 800026c:	4b25      	ldr	r3, [pc, #148]	; (8000304 <main+0x1b8>)
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]
			}
			if (MM == 59)
 8000272:	4b23      	ldr	r3, [pc, #140]	; (8000300 <main+0x1b4>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b3b      	cmp	r3, #59	; 0x3b
 8000278:	d10f      	bne.n	800029a <main+0x14e>

			{
				HH++;
 800027a:	4b20      	ldr	r3, [pc, #128]	; (80002fc <main+0x1b0>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	3301      	adds	r3, #1
 8000280:	b2da      	uxtb	r2, r3
 8000282:	4b1e      	ldr	r3, [pc, #120]	; (80002fc <main+0x1b0>)
 8000284:	701a      	strb	r2, [r3, #0]
				MS = 0;
 8000286:	4b20      	ldr	r3, [pc, #128]	; (8000308 <main+0x1bc>)
 8000288:	2200      	movs	r2, #0
 800028a:	701a      	strb	r2, [r3, #0]
				MM = 0;
 800028c:	4b1c      	ldr	r3, [pc, #112]	; (8000300 <main+0x1b4>)
 800028e:	2200      	movs	r2, #0
 8000290:	701a      	strb	r2, [r3, #0]
				SS = 0;
 8000292:	4b1c      	ldr	r3, [pc, #112]	; (8000304 <main+0x1b8>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
 8000298:	e781      	b.n	800019e <main+0x52>
			} else if (HH == 23) {
 800029a:	4b18      	ldr	r3, [pc, #96]	; (80002fc <main+0x1b0>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b17      	cmp	r3, #23
 80002a0:	f47f af7d 	bne.w	800019e <main+0x52>
				HH = 0;
 80002a4:	4b15      	ldr	r3, [pc, #84]	; (80002fc <main+0x1b0>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	701a      	strb	r2, [r3, #0]
				MM = 0;
 80002aa:	4b15      	ldr	r3, [pc, #84]	; (8000300 <main+0x1b4>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	701a      	strb	r2, [r3, #0]
				SS = 0;
 80002b0:	4b14      	ldr	r3, [pc, #80]	; (8000304 <main+0x1b8>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]
				MS = 0;
 80002b6:	4b14      	ldr	r3, [pc, #80]	; (8000308 <main+0x1bc>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
 80002bc:	e76f      	b.n	800019e <main+0x52>

			}

		} else if (x == 1) {
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <main+0x1ac>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	f43f af6b 	beq.w	800019e <main+0x52>

		} else if (x == 2)
 80002c8:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <main+0x1ac>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	f47f af66 	bne.w	800019e <main+0x52>

		{
			HH = 0;
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <main+0x1b0>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
			MM = 0;
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <main+0x1b4>)
 80002da:	2200      	movs	r2, #0
 80002dc:	701a      	strb	r2, [r3, #0]
			SS = 0;
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <main+0x1b8>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	701a      	strb	r2, [r3, #0]
			MS = 0;
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <main+0x1bc>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	701a      	strb	r2, [r3, #0]
	while (1) {
 80002ea:	e758      	b.n	800019e <main+0x52>
 80002ec:	40021000 	.word	0x40021000
 80002f0:	20000020 	.word	0x20000020
 80002f4:	20000000 	.word	0x20000000
 80002f8:	200000e0 	.word	0x200000e0
 80002fc:	200000dc 	.word	0x200000dc
 8000300:	200000dd 	.word	0x200000dd
 8000304:	200000de 	.word	0x200000de
 8000308:	200000df 	.word	0x200000df
 800030c:	08002344 	.word	0x08002344
 8000310:	200000cc 	.word	0x200000cc

08000314 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b090      	sub	sp, #64	; 0x40
 8000318:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	2228      	movs	r2, #40	; 0x28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f001 fb80 	bl	8001a28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000336:	2301      	movs	r3, #1
 8000338:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800033a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000344:	2301      	movs	r3, #1
 8000346:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000348:	2302      	movs	r3, #2
 800034a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000350:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000352:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000356:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000358:	f107 0318 	add.w	r3, r7, #24
 800035c:	4618      	mov	r0, r3
 800035e:	f000 ff51 	bl	8001204 <HAL_RCC_OscConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x58>
		Error_Handler();
 8000368:	f000 f83c 	bl	80003e4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800036c:	230f      	movs	r3, #15
 800036e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000370:	2302      	movs	r3, #2
 8000372:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2102      	movs	r1, #2
 8000386:	4618      	mov	r0, r3
 8000388:	f001 f9be 	bl	8001708 <HAL_RCC_ClockConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x82>
		Error_Handler();
 8000392:	f000 f827 	bl	80003e4 <Error_Handler>
	}
}
 8000396:	bf00      	nop
 8000398:	3740      	adds	r7, #64	; 0x40
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a0d      	ldr	r2, [pc, #52]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003ac:	f043 0320 	orr.w	r3, r3, #32
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0320 	and.w	r3, r3, #32
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003c4:	f043 0304 	orr.w	r3, r3, #4
 80003c8:	6193      	str	r3, [r2, #24]
 80003ca:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	f003 0304 	and.w	r3, r3, #4
 80003d2:	603b      	str	r3, [r7, #0]
 80003d4:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	40021000 	.word	0x40021000

080003e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e8:	b672      	cpsid	i
}
 80003ea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80003ec:	e7fe      	b.n	80003ec <Error_Handler+0x8>
	...

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <HAL_MspInit+0x5c>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a14      	ldr	r2, [pc, #80]	; (800044c <HAL_MspInit+0x5c>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <HAL_MspInit+0x5c>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a0e      	ldr	r2, [pc, #56]	; (800044c <HAL_MspInit+0x5c>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <HAL_MspInit+0x60>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <HAL_MspInit+0x60>)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000
 8000450:	40010000 	.word	0x40010000

08000454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <NMI_Handler+0x4>

0800045a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045e:	e7fe      	b.n	800045e <HardFault_Handler+0x4>

08000460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <MemManage_Handler+0x4>

08000466 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <BusFault_Handler+0x4>

0800046c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <UsageFault_Handler+0x4>

08000472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr

0800047e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr

0800048a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049a:	f000 fbf3 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004ac:	4a14      	ldr	r2, [pc, #80]	; (8000500 <_sbrk+0x5c>)
 80004ae:	4b15      	ldr	r3, [pc, #84]	; (8000504 <_sbrk+0x60>)
 80004b0:	1ad3      	subs	r3, r2, r3
 80004b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004b8:	4b13      	ldr	r3, [pc, #76]	; (8000508 <_sbrk+0x64>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d102      	bne.n	80004c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <_sbrk+0x64>)
 80004c2:	4a12      	ldr	r2, [pc, #72]	; (800050c <_sbrk+0x68>)
 80004c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <_sbrk+0x64>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4413      	add	r3, r2
 80004ce:	693a      	ldr	r2, [r7, #16]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d207      	bcs.n	80004e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004d4:	f001 fa7e 	bl	80019d4 <__errno>
 80004d8:	4603      	mov	r3, r0
 80004da:	220c      	movs	r2, #12
 80004dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004de:	f04f 33ff 	mov.w	r3, #4294967295
 80004e2:	e009      	b.n	80004f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <_sbrk+0x64>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ea:	4b07      	ldr	r3, [pc, #28]	; (8000508 <_sbrk+0x64>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	4a05      	ldr	r2, [pc, #20]	; (8000508 <_sbrk+0x64>)
 80004f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3718      	adds	r7, #24
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20005000 	.word	0x20005000
 8000504:	00000400 	.word	0x00000400
 8000508:	200000e4 	.word	0x200000e4
 800050c:	20000100 	.word	0x20000100

08000510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800051c:	f7ff fff8 	bl	8000510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480b      	ldr	r0, [pc, #44]	; (8000550 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000522:	490c      	ldr	r1, [pc, #48]	; (8000554 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000524:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a09      	ldr	r2, [pc, #36]	; (800055c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000538:	4c09      	ldr	r4, [pc, #36]	; (8000560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000546:	f001 fa4b 	bl	80019e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054a:	f7ff fdff 	bl	800014c <main>
  bx lr
 800054e:	4770      	bx	lr
  ldr r0, =_sdata
 8000550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000554:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000558:	080023b8 	.word	0x080023b8
  ldr r2, =_sbss
 800055c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000560:	200000fc 	.word	0x200000fc

08000564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <ADC1_2_IRQHandler>
	...

08000568 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <DWT_Delay_Init+0x58>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <DWT_Delay_Init+0x58>)
 8000572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000576:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <DWT_Delay_Init+0x58>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <DWT_Delay_Init+0x58>)
 800057e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000582:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <DWT_Delay_Init+0x5c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <DWT_Delay_Init+0x5c>)
 800058a:	f023 0301 	bic.w	r3, r3, #1
 800058e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <DWT_Delay_Init+0x5c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <DWT_Delay_Init+0x5c>)
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <DWT_Delay_Init+0x5c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80005a2:	bf00      	nop
     __ASM volatile ("NOP");
 80005a4:	bf00      	nop
  __ASM volatile ("NOP");
 80005a6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <DWT_Delay_Init+0x5c>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80005b0:	2300      	movs	r3, #0
 80005b2:	e000      	b.n	80005b6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80005b4:	2301      	movs	r3, #1
  }
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e000edf0 	.word	0xe000edf0
 80005c4:	e0001000 	.word	0xe0001000

080005c8 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 80005d0:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <DWT_Delay_us+0x40>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80005d6:	f001 f9d5 	bl	8001984 <HAL_RCC_GetHCLKFreq>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a0b      	ldr	r2, [pc, #44]	; (800060c <DWT_Delay_us+0x44>)
 80005de:	fba2 2303 	umull	r2, r3, r2, r3
 80005e2:	0c9b      	lsrs	r3, r3, #18
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	fb02 f303 	mul.w	r3, r2, r3
 80005ea:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 80005ec:	bf00      	nop
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <DWT_Delay_us+0x40>)
 80005f0:	685a      	ldr	r2, [r3, #4]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	1ad2      	subs	r2, r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d3f8      	bcc.n	80005ee <DWT_Delay_us+0x26>
		;
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	e0001000 	.word	0xe0001000
 800060c:	431bde83 	.word	0x431bde83

08000610 <usDelay>:
    EN_SET(lcd,0);    \
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 800061a:	88fb      	ldrh	r3, [r7, #6]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffd3 	bl	80005c8 <DWT_Delay_us>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte) {
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	460b      	mov	r3, r1
 8000634:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	68da      	ldr	r2, [r3, #12]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	7a1b      	ldrb	r3, [r3, #8]
 8000640:	4619      	mov	r1, r3
 8000642:	230f      	movs	r3, #15
 8000644:	408b      	lsls	r3, r1
 8000646:	43db      	mvns	r3, r3
 8000648:	4619      	mov	r1, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	400a      	ands	r2, r1
 8000650:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	68da      	ldr	r2, [r3, #12]
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	7a09      	ldrb	r1, [r1, #8]
 800065e:	408b      	lsls	r3, r1
 8000660:	4619      	mov	r1, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	430a      	orrs	r2, r1
 8000668:	60da      	str	r2, [r3, #12]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6958      	ldr	r0, [r3, #20]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	8b1b      	ldrh	r3, [r3, #24]
 8000688:	78fa      	ldrb	r2, [r7, #3]
 800068a:	4619      	mov	r1, r3
 800068c:	f000 fda2 	bl	80011d4 <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	68d8      	ldr	r0, [r3, #12]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	8a1b      	ldrh	r3, [r3, #16]
 80006ac:	78fa      	ldrb	r2, [r7, #3]
 80006ae:	4619      	mov	r1, r3
 80006b0:	f000 fd90 	bl	80011d4 <HAL_GPIO_WritePin>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G = { .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin,
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	8b1b      	ldrh	r3, [r3, #24]
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	2301      	movs	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	2302      	movs	r3, #2
 80006de:	617b      	str	r3, [r7, #20]
			.Speed = GPIO_SPEED_FREQ_LOW };
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	f107 0208 	add.w	r2, r7, #8
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fbee 	bl	8000ecc <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	8a1b      	ldrh	r3, [r3, #16]
 80006f4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f107 0208 	add.w	r2, r7, #8
 80006fe:	4611      	mov	r1, r2
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fbe3 	bl	8000ecc <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7a1b      	ldrb	r3, [r3, #8]
 800070a:	461a      	mov	r2, r3
 800070c:	230f      	movs	r3, #15
 800070e:	4093      	lsls	r3, r2
 8000710:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	f107 0208 	add.w	r2, r7, #8
 800071a:	4611      	mov	r1, r2
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fbd5 	bl	8000ecc <HAL_GPIO_Init>
}
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value) {
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	460b      	mov	r3, r1
 8000734:	70fb      	strb	r3, [r7, #3]
 8000736:	4613      	mov	r3, r2
 8000738:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 800073a:	78fb      	ldrb	r3, [r7, #3]
 800073c:	4619      	mov	r1, r3
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff ff98 	bl	8000674 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8000744:	78bb      	ldrb	r3, [r7, #2]
 8000746:	091b      	lsrs	r3, r3, #4
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4619      	mov	r1, r3
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff ff6c 	bl	800062a <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8000752:	2101      	movs	r1, #1
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff9f 	bl	8000698 <EN_SET>
 800075a:	200a      	movs	r0, #10
 800075c:	f7ff ff58 	bl	8000610 <usDelay>
 8000760:	2100      	movs	r1, #0
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff ff98 	bl	8000698 <EN_SET>
 8000768:	2064      	movs	r0, #100	; 0x64
 800076a:	f7ff ff51 	bl	8000610 <usDelay>
	;
	Write_HalfByte(lcd, value);
 800076e:	78bb      	ldrb	r3, [r7, #2]
 8000770:	4619      	mov	r1, r3
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ff59 	bl	800062a <Write_HalfByte>
	PulseEn
 8000778:	2101      	movs	r1, #1
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff ff8c 	bl	8000698 <EN_SET>
 8000780:	200a      	movs	r0, #10
 8000782:	f7ff ff45 	bl	8000610 <usDelay>
 8000786:	2100      	movs	r1, #0
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff85 	bl	8000698 <EN_SET>
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f7ff ff3e 	bl	8000610 <usDelay>
	;
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
 80007a8:	4613      	mov	r3, r2
 80007aa:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 80007ac:	f7ff fedc 	bl	8000568 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff83 	bl	80006bc <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2200      	movs	r2, #0
 80007ba:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2240      	movs	r2, #64	; 0x40
 80007c0:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	78ba      	ldrb	r2, [r7, #2]
 80007c6:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 80007c8:	78bb      	ldrb	r3, [r7, #2]
 80007ca:	3340      	adds	r3, #64	; 0x40
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 80007d2:	2100      	movs	r1, #0
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff4d 	bl	8000674 <RS_SET>
	EN_SET(lcd, 0);
 80007da:	2100      	movs	r1, #0
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff5b 	bl	8000698 <EN_SET>
	usDelay(50000);
 80007e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007e6:	f7ff ff13 	bl	8000610 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	e018      	b.n	8000822 <Alcd_Init+0x86>
		Write_HalfByte(lcd, 0x03);
 80007f0:	2103      	movs	r1, #3
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ff19 	bl	800062a <Write_HalfByte>
		PulseEn
 80007f8:	2101      	movs	r1, #1
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff4c 	bl	8000698 <EN_SET>
 8000800:	200a      	movs	r0, #10
 8000802:	f7ff ff05 	bl	8000610 <usDelay>
 8000806:	2100      	movs	r1, #0
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff45 	bl	8000698 <EN_SET>
 800080e:	2064      	movs	r0, #100	; 0x64
 8000810:	f7ff fefe 	bl	8000610 <usDelay>
		;
		usDelay(4500);
 8000814:	f241 1094 	movw	r0, #4500	; 0x1194
 8000818:	f7ff fefa 	bl	8000610 <usDelay>
	for (x = 0; x < 2; x++) {
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	3301      	adds	r3, #1
 8000820:	73fb      	strb	r3, [r7, #15]
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d9e3      	bls.n	80007f0 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 8000828:	2103      	movs	r1, #3
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff fefd 	bl	800062a <Write_HalfByte>
	PulseEn
 8000830:	2101      	movs	r1, #1
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ff30 	bl	8000698 <EN_SET>
 8000838:	200a      	movs	r0, #10
 800083a:	f7ff fee9 	bl	8000610 <usDelay>
 800083e:	2100      	movs	r1, #0
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff29 	bl	8000698 <EN_SET>
 8000846:	2064      	movs	r0, #100	; 0x64
 8000848:	f7ff fee2 	bl	8000610 <usDelay>
	;
	usDelay(150);
 800084c:	2096      	movs	r0, #150	; 0x96
 800084e:	f7ff fedf 	bl	8000610 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8000852:	2102      	movs	r1, #2
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff fee8 	bl	800062a <Write_HalfByte>
	PulseEn
 800085a:	2101      	movs	r1, #1
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff1b 	bl	8000698 <EN_SET>
 8000862:	200a      	movs	r0, #10
 8000864:	f7ff fed4 	bl	8000610 <usDelay>
 8000868:	2100      	movs	r1, #0
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ff14 	bl	8000698 <EN_SET>
 8000870:	2064      	movs	r0, #100	; 0x64
 8000872:	f7ff fecd 	bl	8000610 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8000876:	2228      	movs	r2, #40	; 0x28
 8000878:	2100      	movs	r1, #0
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff55 	bl	800072a <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8000880:	2300      	movs	r3, #0
 8000882:	2200      	movs	r2, #0
 8000884:	2101      	movs	r1, #1
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f000 f86d 	bl	8000966 <Alcd_Display_Control>
	Alcd_Clear(lcd);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f859 	bl	8000944 <Alcd_Clear>
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col) {
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70fb      	strb	r3, [r7, #3]
 80008a6:	4613      	mov	r3, r2
 80008a8:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 80008aa:	78fb      	ldrb	r3, [r7, #3]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	4413      	add	r3, r2
 80008b0:	7e9a      	ldrb	r2, [r3, #26]
 80008b2:	78bb      	ldrb	r3, [r7, #2]
 80008b4:	4413      	add	r3, r2
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008be:	b25b      	sxtb	r3, r3
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	2100      	movs	r1, #0
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ff2f 	bl	800072a <Alcd_SendByte>
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	4613      	mov	r3, r2
 80008e0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	75fb      	strb	r3, [r7, #23]
 80008e6:	e00b      	b.n	8000900 <Alcd_Put_n+0x2c>
		SendByte(1, *(text++));
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	60ba      	str	r2, [r7, #8]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	2101      	movs	r1, #1
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff ff18 	bl	800072a <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++) {
 80008fa:	7dfb      	ldrb	r3, [r7, #23]
 80008fc:	3301      	adds	r3, #1
 80008fe:	75fb      	strb	r3, [r7, #23]
 8000900:	7dfa      	ldrb	r2, [r7, #23]
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	429a      	cmp	r2, r3
 8000906:	d3ef      	bcc.n	80008e8 <Alcd_Put_n+0x14>
	}
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text,
		uint8_t len) {
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	72fb      	strb	r3, [r7, #11]
 8000920:	4613      	mov	r3, r2
 8000922:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8000924:	7aba      	ldrb	r2, [r7, #10]
 8000926:	7afb      	ldrb	r3, [r7, #11]
 8000928:	4619      	mov	r1, r3
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f7ff ffb5 	bl	800089a <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8000930:	7e3b      	ldrb	r3, [r7, #24]
 8000932:	461a      	mov	r2, r3
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	68f8      	ldr	r0, [r7, #12]
 8000938:	f7ff ffcc 	bl	80008d4 <Alcd_Put_n>
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <Alcd_Clear>:
void Alcd_Home(Alcd_t *lcd) {
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 800094c:	2201      	movs	r2, #1
 800094e:	2100      	movs	r1, #0
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff feea 	bl	800072a <Alcd_SendByte>
	usDelay(2000);
 8000956:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800095a:	f7ff fe59 	bl	8000610 <usDelay>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF,
		uint8_t BLINK_ON_OFF) {
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	4608      	mov	r0, r1
 8000970:	4611      	mov	r1, r2
 8000972:	461a      	mov	r2, r3
 8000974:	4603      	mov	r3, r0
 8000976:	70fb      	strb	r3, [r7, #3]
 8000978:	460b      	mov	r3, r1
 800097a:	70bb      	strb	r3, [r7, #2]
 800097c:	4613      	mov	r3, r2
 800097e:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	779a      	strb	r2, [r3, #30]
	if (ON_OFF) {
 8000986:	78fb      	ldrb	r3, [r7, #3]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d006      	beq.n	800099a <Alcd_Display_Control+0x34>
		lcd->_displaycontrol |= LCD_DISPLAYON;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	7f9b      	ldrb	r3, [r3, #30]
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	b2da      	uxtb	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF) {
 800099a:	78bb      	ldrb	r3, [r7, #2]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d006      	beq.n	80009ae <Alcd_Display_Control+0x48>
		lcd->_displaycontrol |= LCD_CURSORON;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7f9b      	ldrb	r3, [r3, #30]
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF) {
 80009ae:	787b      	ldrb	r3, [r7, #1]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d006      	beq.n	80009c2 <Alcd_Display_Control+0x5c>
		lcd->_displaycontrol |= LCD_BLINKON;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	7f9b      	ldrb	r3, [r3, #30]
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	7f9b      	ldrb	r3, [r3, #30]
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7f9b      	ldrb	r3, [r3, #30]
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	461a      	mov	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff fea3 	bl	800072a <Alcd_SendByte>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <Hardware_Interface_Initialize>:
#include "../matrix_keypad/matrix_keypad.h"

static void Hardware_Interface_Initialize(Keypad_Matrix_t *kp) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GP = { .Mode = GPIO_MODE_OUTPUT_PP, // Output Push Pull Mode
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	2301      	movs	r3, #1
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
			.Speed = GPIO_SPEED_LOW };
	uint32_t Pins = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < kp->Rows; x++) {
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
 8000a12:	e00e      	b.n	8000a32 <Hardware_Interface_Initialize+0x46>
		Pins |= 1 << ((kp->Row_Start_Pin) + x);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	7b1b      	ldrb	r3, [r3, #12]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	6a3b      	ldr	r3, [r7, #32]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	2201      	movs	r2, #1
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	461a      	mov	r2, r3
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < kp->Rows; x++) {
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	6a3b      	ldr	r3, [r7, #32]
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	dbea      	blt.n	8000a14 <Hardware_Interface_Initialize+0x28>
	};
	GP.Pin = Pins;
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(kp->Row_Port, &GP);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	f107 020c 	add.w	r2, r7, #12
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 fa3d 	bl	8000ecc <HAL_GPIO_Init>

	kp->Output_Mask = Pins;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a56:	61da      	str	r2, [r3, #28]
	GP.Mode = GPIO_MODE_INPUT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
	GP.Pull = GPIO_PULLDOWN;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	617b      	str	r3, [r7, #20]
	Pins = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < kp->Columns; x++) {
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	e00e      	b.n	8000a88 <Hardware_Interface_Initialize+0x9c>
		Pins |= 1 << ((kp->Column_Start_Pin) + x);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	7d1b      	ldrb	r3, [r3, #20]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	4413      	add	r3, r2
 8000a74:	2201      	movs	r2, #1
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < kp->Columns; x++) {
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3301      	adds	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	785b      	ldrb	r3, [r3, #1]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	4293      	cmp	r3, r2
 8000a92:	dbea      	blt.n	8000a6a <Hardware_Interface_Initialize+0x7e>
	};
	GP.Pin = Pins;
 8000a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a96:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(kp->Column_Port, &GP);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	691b      	ldr	r3, [r3, #16]
 8000a9c:	f107 020c 	add.w	r2, r7, #12
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fa12 	bl	8000ecc <HAL_GPIO_Init>
	kp->Input_Mask = Pins;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aac:	619a      	str	r2, [r3, #24]
}
 8000aae:	bf00      	nop
 8000ab0:	3728      	adds	r7, #40	; 0x28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <Hardware_Generate_Delay>:

static void Hardware_Generate_Delay(uint16_t delay) {
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(delay);
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f8fa 	bl	8000cbc <HAL_Delay>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <Hardware_Get_Inputs>:

static uint8_t Hardware_Get_Inputs(Keypad_Matrix_t *kp) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	uint32_t m = kp->Column_Port->IDR & kp->Input_Mask;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	691b      	ldr	r3, [r3, #16]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
	m >>= kp->Column_Start_Pin;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	7d1b      	ldrb	r3, [r3, #20]
 8000aea:	461a      	mov	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	40d3      	lsrs	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
	return (uint8_t) m;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	b2db      	uxtb	r3, r3

}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <Hardware_Set_Outputs>:

static void Hardware_Set_Outputs(Keypad_Matrix_t *kp, uint8_t OutputStatus) {
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	70fb      	strb	r3, [r7, #3]
	kp->Row_Port->ODR &= ~(kp->Output_Mask);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	68d9      	ldr	r1, [r3, #12]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	43da      	mvns	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	400a      	ands	r2, r1
 8000b1e:	60da      	str	r2, [r3, #12]
	kp->Row_Port->ODR |= ((uint32_t) OutputStatus) << kp->Row_Start_Pin;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	68d9      	ldr	r1, [r3, #12]
 8000b26:	78fb      	ldrb	r3, [r7, #3]
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	7b12      	ldrb	r2, [r2, #12]
 8000b2c:	fa03 f202 	lsl.w	r2, r3, r2
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	430a      	orrs	r2, r1
 8000b36:	60da      	str	r2, [r3, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <Keypad_Matrix_init>:

void Keypad_Matrix_init(Keypad_Matrix_t *kp) {
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
	Hardware_Interface_Initialize(kp);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ff4e 	bl	80009ec <Hardware_Interface_Initialize>
	Hardware_Set_Outputs(kp, 0);
 8000b50:	2100      	movs	r1, #0
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ffd4 	bl	8000b00 <Hardware_Set_Outputs>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <Keypad_Matrix_Refresh>:

void Keypad_Matrix_Refresh(Keypad_Matrix_t *kp) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	kp->Button_Status = 0;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	605a      	str	r2, [r3, #4]
	uint8_t scan = 0b00000001;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
	for (uint8_t x = 0; x < kp->Rows; x++) {
 8000b72:	2300      	movs	r3, #0
 8000b74:	73bb      	strb	r3, [r7, #14]
 8000b76:	e01e      	b.n	8000bb6 <Keypad_Matrix_Refresh+0x56>
		Hardware_Set_Outputs(kp, scan);
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ffbf 	bl	8000b00 <Hardware_Set_Outputs>
		Hardware_Generate_Delay(1);
 8000b82:	2001      	movs	r0, #1
 8000b84:	f7ff ff97 	bl	8000ab6 <Hardware_Generate_Delay>
		kp->Button_Status |= Hardware_Get_Inputs(kp) << (x * kp->Columns);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ffa1 	bl	8000ad0 <Hardware_Get_Inputs>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	4619      	mov	r1, r3
 8000b92:	7bbb      	ldrb	r3, [r7, #14]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	7852      	ldrb	r2, [r2, #1]
 8000b98:	fb02 f303 	mul.w	r3, r2, r3
 8000b9c:	fa01 f203 	lsl.w	r2, r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	605a      	str	r2, [r3, #4]
		scan <<= 1;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
	for (uint8_t x = 0; x < kp->Rows; x++) {
 8000bb0:	7bbb      	ldrb	r3, [r7, #14]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	73bb      	strb	r3, [r7, #14]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	7bba      	ldrb	r2, [r7, #14]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d3db      	bcc.n	8000b78 <Keypad_Matrix_Refresh+0x18>
	}
}
 8000bc0:	bf00      	nop
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <Keypad_Matrix_ReadKey>:

uint8_t Keypad_Matrix_ReadKey(Keypad_Matrix_t *kp, uint8_t key) {
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	70fb      	strb	r3, [r7, #3]
	if (kp->Button_Status & (1 << key)) {
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	78fa      	ldrb	r2, [r7, #3]
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fa01 f202 	lsl.w	r2, r1, r2
 8000be2:	4013      	ands	r3, r2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <Keypad_Matrix_ReadKey+0x22>
		return 1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e000      	b.n	8000bee <Keypad_Matrix_ReadKey+0x24>
	} else {
		return 0;
 8000bec:	2300      	movs	r3, #0
	}
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_Init+0x28>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_Init+0x28>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f92b 	bl	8000e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fbec 	bl	80003f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40022000 	.word	0x40022000

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f935 	bl	8000eb2 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 f90b 	bl	8000e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000040 	.word	0x20000040
 8000c7c:	20000048 	.word	0x20000048
 8000c80:	20000044 	.word	0x20000044

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a03      	ldr	r2, [pc, #12]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	20000048 	.word	0x20000048
 8000ca4:	200000e8 	.word	0x200000e8

08000ca8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <HAL_GetTick+0x10>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	200000e8 	.word	0x200000e8

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc4:	f7ff fff0 	bl	8000ca8 <HAL_GetTick>
 8000cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd4:	d005      	beq.n	8000ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_Delay+0x44>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4413      	add	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce2:	bf00      	nop
 8000ce4:	f7ff ffe0 	bl	8000ca8 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d8f7      	bhi.n	8000ce4 <HAL_Delay+0x28>
  {
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000048 	.word	0x20000048

08000d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <__NVIC_SetPriorityGrouping+0x44>)
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	60d3      	str	r3, [r2, #12]
}
 8000d3c:	bf00      	nop
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__NVIC_GetPriorityGrouping+0x18>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	0a1b      	lsrs	r3, r3, #8
 8000d56:	f003 0307 	and.w	r3, r3, #7
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	; (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e30:	d301      	bcc.n	8000e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00f      	b.n	8000e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <SysTick_Config+0x40>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3e:	210f      	movs	r1, #15
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f7ff ff90 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <SysTick_Config+0x40>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <SysTick_Config+0x40>)
 8000e50:	2207      	movs	r2, #7
 8000e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010

08000e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff49 	bl	8000d04 <__NVIC_SetPriorityGrouping>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8c:	f7ff ff5e 	bl	8000d4c <__NVIC_GetPriorityGrouping>
 8000e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f7ff ff90 	bl	8000dbc <NVIC_EncodePriority>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff5f 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ffb0 	bl	8000e20 <SysTick_Config>
 8000ec0:	4603      	mov	r3, r0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b08b      	sub	sp, #44	; 0x2c
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eda:	2300      	movs	r3, #0
 8000edc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ede:	e169      	b.n	80011b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f040 8158 	bne.w	80011ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	4a9a      	ldr	r2, [pc, #616]	; (800116c <HAL_GPIO_Init+0x2a0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d05e      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
 8000f08:	4a98      	ldr	r2, [pc, #608]	; (800116c <HAL_GPIO_Init+0x2a0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d875      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f0e:	4a98      	ldr	r2, [pc, #608]	; (8001170 <HAL_GPIO_Init+0x2a4>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d058      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
 8000f14:	4a96      	ldr	r2, [pc, #600]	; (8001170 <HAL_GPIO_Init+0x2a4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d86f      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f1a:	4a96      	ldr	r2, [pc, #600]	; (8001174 <HAL_GPIO_Init+0x2a8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d052      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
 8000f20:	4a94      	ldr	r2, [pc, #592]	; (8001174 <HAL_GPIO_Init+0x2a8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d869      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f26:	4a94      	ldr	r2, [pc, #592]	; (8001178 <HAL_GPIO_Init+0x2ac>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d04c      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
 8000f2c:	4a92      	ldr	r2, [pc, #584]	; (8001178 <HAL_GPIO_Init+0x2ac>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d863      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f32:	4a92      	ldr	r2, [pc, #584]	; (800117c <HAL_GPIO_Init+0x2b0>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d046      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
 8000f38:	4a90      	ldr	r2, [pc, #576]	; (800117c <HAL_GPIO_Init+0x2b0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d85d      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f3e:	2b12      	cmp	r3, #18
 8000f40:	d82a      	bhi.n	8000f98 <HAL_GPIO_Init+0xcc>
 8000f42:	2b12      	cmp	r3, #18
 8000f44:	d859      	bhi.n	8000ffa <HAL_GPIO_Init+0x12e>
 8000f46:	a201      	add	r2, pc, #4	; (adr r2, 8000f4c <HAL_GPIO_Init+0x80>)
 8000f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4c:	08000fc7 	.word	0x08000fc7
 8000f50:	08000fa1 	.word	0x08000fa1
 8000f54:	08000fb3 	.word	0x08000fb3
 8000f58:	08000ff5 	.word	0x08000ff5
 8000f5c:	08000ffb 	.word	0x08000ffb
 8000f60:	08000ffb 	.word	0x08000ffb
 8000f64:	08000ffb 	.word	0x08000ffb
 8000f68:	08000ffb 	.word	0x08000ffb
 8000f6c:	08000ffb 	.word	0x08000ffb
 8000f70:	08000ffb 	.word	0x08000ffb
 8000f74:	08000ffb 	.word	0x08000ffb
 8000f78:	08000ffb 	.word	0x08000ffb
 8000f7c:	08000ffb 	.word	0x08000ffb
 8000f80:	08000ffb 	.word	0x08000ffb
 8000f84:	08000ffb 	.word	0x08000ffb
 8000f88:	08000ffb 	.word	0x08000ffb
 8000f8c:	08000ffb 	.word	0x08000ffb
 8000f90:	08000fa9 	.word	0x08000fa9
 8000f94:	08000fbd 	.word	0x08000fbd
 8000f98:	4a79      	ldr	r2, [pc, #484]	; (8001180 <HAL_GPIO_Init+0x2b4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d013      	beq.n	8000fc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f9e:	e02c      	b.n	8000ffa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	623b      	str	r3, [r7, #32]
          break;
 8000fa6:	e029      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	3304      	adds	r3, #4
 8000fae:	623b      	str	r3, [r7, #32]
          break;
 8000fb0:	e024      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	3308      	adds	r3, #8
 8000fb8:	623b      	str	r3, [r7, #32]
          break;
 8000fba:	e01f      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	330c      	adds	r3, #12
 8000fc2:	623b      	str	r3, [r7, #32]
          break;
 8000fc4:	e01a      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d102      	bne.n	8000fd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	623b      	str	r3, [r7, #32]
          break;
 8000fd2:	e013      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d105      	bne.n	8000fe8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	611a      	str	r2, [r3, #16]
          break;
 8000fe6:	e009      	b.n	8000ffc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69fa      	ldr	r2, [r7, #28]
 8000ff0:	615a      	str	r2, [r3, #20]
          break;
 8000ff2:	e003      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
          break;
 8000ff8:	e000      	b.n	8000ffc <HAL_GPIO_Init+0x130>
          break;
 8000ffa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	2bff      	cmp	r3, #255	; 0xff
 8001000:	d801      	bhi.n	8001006 <HAL_GPIO_Init+0x13a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	e001      	b.n	800100a <HAL_GPIO_Init+0x13e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3304      	adds	r3, #4
 800100a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	2bff      	cmp	r3, #255	; 0xff
 8001010:	d802      	bhi.n	8001018 <HAL_GPIO_Init+0x14c>
 8001012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	e002      	b.n	800101e <HAL_GPIO_Init+0x152>
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	3b08      	subs	r3, #8
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	210f      	movs	r1, #15
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	fa01 f303 	lsl.w	r3, r1, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	401a      	ands	r2, r3
 8001030:	6a39      	ldr	r1, [r7, #32]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	fa01 f303 	lsl.w	r3, r1, r3
 8001038:	431a      	orrs	r2, r3
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 80b1 	beq.w	80011ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800104c:	4b4d      	ldr	r3, [pc, #308]	; (8001184 <HAL_GPIO_Init+0x2b8>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a4c      	ldr	r2, [pc, #304]	; (8001184 <HAL_GPIO_Init+0x2b8>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b4a      	ldr	r3, [pc, #296]	; (8001184 <HAL_GPIO_Init+0x2b8>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001064:	4a48      	ldr	r2, [pc, #288]	; (8001188 <HAL_GPIO_Init+0x2bc>)
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001070:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	4013      	ands	r3, r2
 8001086:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a40      	ldr	r2, [pc, #256]	; (800118c <HAL_GPIO_Init+0x2c0>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d013      	beq.n	80010b8 <HAL_GPIO_Init+0x1ec>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a3f      	ldr	r2, [pc, #252]	; (8001190 <HAL_GPIO_Init+0x2c4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d00d      	beq.n	80010b4 <HAL_GPIO_Init+0x1e8>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a3e      	ldr	r2, [pc, #248]	; (8001194 <HAL_GPIO_Init+0x2c8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d007      	beq.n	80010b0 <HAL_GPIO_Init+0x1e4>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a3d      	ldr	r2, [pc, #244]	; (8001198 <HAL_GPIO_Init+0x2cc>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d101      	bne.n	80010ac <HAL_GPIO_Init+0x1e0>
 80010a8:	2303      	movs	r3, #3
 80010aa:	e006      	b.n	80010ba <HAL_GPIO_Init+0x1ee>
 80010ac:	2304      	movs	r3, #4
 80010ae:	e004      	b.n	80010ba <HAL_GPIO_Init+0x1ee>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e002      	b.n	80010ba <HAL_GPIO_Init+0x1ee>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <HAL_GPIO_Init+0x1ee>
 80010b8:	2300      	movs	r3, #0
 80010ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010bc:	f002 0203 	and.w	r2, r2, #3
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	4093      	lsls	r3, r2
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010ca:	492f      	ldr	r1, [pc, #188]	; (8001188 <HAL_GPIO_Init+0x2bc>)
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	089b      	lsrs	r3, r3, #2
 80010d0:	3302      	adds	r3, #2
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <HAL_GPIO_Init+0x2d0>)
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	492c      	ldr	r1, [pc, #176]	; (800119c <HAL_GPIO_Init+0x2d0>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	608b      	str	r3, [r1, #8]
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010f2:	4b2a      	ldr	r3, [pc, #168]	; (800119c <HAL_GPIO_Init+0x2d0>)
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	4928      	ldr	r1, [pc, #160]	; (800119c <HAL_GPIO_Init+0x2d0>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <HAL_GPIO_Init+0x2d0>)
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	4922      	ldr	r1, [pc, #136]	; (800119c <HAL_GPIO_Init+0x2d0>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	60cb      	str	r3, [r1, #12]
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <HAL_GPIO_Init+0x2d0>)
 800111c:	68da      	ldr	r2, [r3, #12]
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	43db      	mvns	r3, r3
 8001122:	491e      	ldr	r1, [pc, #120]	; (800119c <HAL_GPIO_Init+0x2d0>)
 8001124:	4013      	ands	r3, r2
 8001126:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d006      	beq.n	8001142 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_GPIO_Init+0x2d0>)
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	4918      	ldr	r1, [pc, #96]	; (800119c <HAL_GPIO_Init+0x2d0>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_GPIO_Init+0x2d0>)
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	43db      	mvns	r3, r3
 800114a:	4914      	ldr	r1, [pc, #80]	; (800119c <HAL_GPIO_Init+0x2d0>)
 800114c:	4013      	ands	r3, r2
 800114e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d021      	beq.n	80011a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_GPIO_Init+0x2d0>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	490e      	ldr	r1, [pc, #56]	; (800119c <HAL_GPIO_Init+0x2d0>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	600b      	str	r3, [r1, #0]
 8001168:	e021      	b.n	80011ae <HAL_GPIO_Init+0x2e2>
 800116a:	bf00      	nop
 800116c:	10320000 	.word	0x10320000
 8001170:	10310000 	.word	0x10310000
 8001174:	10220000 	.word	0x10220000
 8001178:	10210000 	.word	0x10210000
 800117c:	10120000 	.word	0x10120000
 8001180:	10110000 	.word	0x10110000
 8001184:	40021000 	.word	0x40021000
 8001188:	40010000 	.word	0x40010000
 800118c:	40010800 	.word	0x40010800
 8001190:	40010c00 	.word	0x40010c00
 8001194:	40011000 	.word	0x40011000
 8001198:	40011400 	.word	0x40011400
 800119c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HAL_GPIO_Init+0x304>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	4909      	ldr	r1, [pc, #36]	; (80011d0 <HAL_GPIO_Init+0x304>)
 80011aa:	4013      	ands	r3, r2
 80011ac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	3301      	adds	r3, #1
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	fa22 f303 	lsr.w	r3, r2, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f47f ae8e 	bne.w	8000ee0 <HAL_GPIO_Init+0x14>
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	372c      	adds	r7, #44	; 0x2c
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	40010400 	.word	0x40010400

080011d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e4:	787b      	ldrb	r3, [r7, #1]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011f0:	e003      	b.n	80011fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	041a      	lsls	r2, r3, #16
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	611a      	str	r2, [r3, #16]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e272      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 8087 	beq.w	8001332 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001224:	4b92      	ldr	r3, [pc, #584]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b04      	cmp	r3, #4
 800122e:	d00c      	beq.n	800124a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001230:	4b8f      	ldr	r3, [pc, #572]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 030c 	and.w	r3, r3, #12
 8001238:	2b08      	cmp	r3, #8
 800123a:	d112      	bne.n	8001262 <HAL_RCC_OscConfig+0x5e>
 800123c:	4b8c      	ldr	r3, [pc, #560]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001248:	d10b      	bne.n	8001262 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124a:	4b89      	ldr	r3, [pc, #548]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d06c      	beq.n	8001330 <HAL_RCC_OscConfig+0x12c>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d168      	bne.n	8001330 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e24c      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126a:	d106      	bne.n	800127a <HAL_RCC_OscConfig+0x76>
 800126c:	4b80      	ldr	r3, [pc, #512]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a7f      	ldr	r2, [pc, #508]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	e02e      	b.n	80012d8 <HAL_RCC_OscConfig+0xd4>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0x98>
 8001282:	4b7b      	ldr	r3, [pc, #492]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a7a      	ldr	r2, [pc, #488]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b78      	ldr	r3, [pc, #480]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a77      	ldr	r2, [pc, #476]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e01d      	b.n	80012d8 <HAL_RCC_OscConfig+0xd4>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0xbc>
 80012a6:	4b72      	ldr	r3, [pc, #456]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a71      	ldr	r2, [pc, #452]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b6f      	ldr	r3, [pc, #444]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6e      	ldr	r2, [pc, #440]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e00b      	b.n	80012d8 <HAL_RCC_OscConfig+0xd4>
 80012c0:	4b6b      	ldr	r3, [pc, #428]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a6a      	ldr	r2, [pc, #424]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b68      	ldr	r3, [pc, #416]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a67      	ldr	r2, [pc, #412]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d013      	beq.n	8001308 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fce2 	bl	8000ca8 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fcde 	bl	8000ca8 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e200      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b5d      	ldr	r3, [pc, #372]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0xe4>
 8001306:	e014      	b.n	8001332 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fcce 	bl	8000ca8 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fcca 	bl	8000ca8 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e1ec      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	4b53      	ldr	r3, [pc, #332]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x10c>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d063      	beq.n	8001406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800133e:	4b4c      	ldr	r3, [pc, #304]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00b      	beq.n	8001362 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800134a:	4b49      	ldr	r3, [pc, #292]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b08      	cmp	r3, #8
 8001354:	d11c      	bne.n	8001390 <HAL_RCC_OscConfig+0x18c>
 8001356:	4b46      	ldr	r3, [pc, #280]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d116      	bne.n	8001390 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001362:	4b43      	ldr	r3, [pc, #268]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <HAL_RCC_OscConfig+0x176>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	2b01      	cmp	r3, #1
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e1c0      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137a:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	4939      	ldr	r1, [pc, #228]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 800138a:	4313      	orrs	r3, r2
 800138c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	e03a      	b.n	8001406 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d020      	beq.n	80013da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001398:	4b36      	ldr	r3, [pc, #216]	; (8001474 <HAL_RCC_OscConfig+0x270>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139e:	f7ff fc83 	bl	8000ca8 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a6:	f7ff fc7f 	bl	8000ca8 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e1a1      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4927      	ldr	r1, [pc, #156]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
 80013d8:	e015      	b.n	8001406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013da:	4b26      	ldr	r3, [pc, #152]	; (8001474 <HAL_RCC_OscConfig+0x270>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff fc62 	bl	8000ca8 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff fc5e 	bl	8000ca8 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e180      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d03a      	beq.n	8001488 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d019      	beq.n	800144e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_RCC_OscConfig+0x274>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001420:	f7ff fc42 	bl	8000ca8 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001428:	f7ff fc3e 	bl	8000ca8 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e160      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_RCC_OscConfig+0x26c>)
 800143c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001446:	2001      	movs	r0, #1
 8001448:	f000 faa6 	bl	8001998 <RCC_Delay>
 800144c:	e01c      	b.n	8001488 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_RCC_OscConfig+0x274>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001454:	f7ff fc28 	bl	8000ca8 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145a:	e00f      	b.n	800147c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800145c:	f7ff fc24 	bl	8000ca8 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d908      	bls.n	800147c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e146      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	42420000 	.word	0x42420000
 8001478:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147c:	4b92      	ldr	r3, [pc, #584]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1e9      	bne.n	800145c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 80a6 	beq.w	80015e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149a:	4b8b      	ldr	r3, [pc, #556]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10d      	bne.n	80014c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b88      	ldr	r3, [pc, #544]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a87      	ldr	r2, [pc, #540]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b85      	ldr	r3, [pc, #532]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014be:	2301      	movs	r3, #1
 80014c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c2:	4b82      	ldr	r3, [pc, #520]	; (80016cc <HAL_RCC_OscConfig+0x4c8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d118      	bne.n	8001500 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ce:	4b7f      	ldr	r3, [pc, #508]	; (80016cc <HAL_RCC_OscConfig+0x4c8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a7e      	ldr	r2, [pc, #504]	; (80016cc <HAL_RCC_OscConfig+0x4c8>)
 80014d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014da:	f7ff fbe5 	bl	8000ca8 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e2:	f7ff fbe1 	bl	8000ca8 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b64      	cmp	r3, #100	; 0x64
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e103      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	4b75      	ldr	r3, [pc, #468]	; (80016cc <HAL_RCC_OscConfig+0x4c8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d106      	bne.n	8001516 <HAL_RCC_OscConfig+0x312>
 8001508:	4b6f      	ldr	r3, [pc, #444]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4a6e      	ldr	r2, [pc, #440]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6213      	str	r3, [r2, #32]
 8001514:	e02d      	b.n	8001572 <HAL_RCC_OscConfig+0x36e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x334>
 800151e:	4b6a      	ldr	r3, [pc, #424]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4a69      	ldr	r2, [pc, #420]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	f023 0301 	bic.w	r3, r3, #1
 8001528:	6213      	str	r3, [r2, #32]
 800152a:	4b67      	ldr	r3, [pc, #412]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4a66      	ldr	r2, [pc, #408]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	f023 0304 	bic.w	r3, r3, #4
 8001534:	6213      	str	r3, [r2, #32]
 8001536:	e01c      	b.n	8001572 <HAL_RCC_OscConfig+0x36e>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b05      	cmp	r3, #5
 800153e:	d10c      	bne.n	800155a <HAL_RCC_OscConfig+0x356>
 8001540:	4b61      	ldr	r3, [pc, #388]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4a60      	ldr	r2, [pc, #384]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6213      	str	r3, [r2, #32]
 800154c:	4b5e      	ldr	r3, [pc, #376]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800154e:	6a1b      	ldr	r3, [r3, #32]
 8001550:	4a5d      	ldr	r2, [pc, #372]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6213      	str	r3, [r2, #32]
 8001558:	e00b      	b.n	8001572 <HAL_RCC_OscConfig+0x36e>
 800155a:	4b5b      	ldr	r3, [pc, #364]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4a5a      	ldr	r2, [pc, #360]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	6213      	str	r3, [r2, #32]
 8001566:	4b58      	ldr	r3, [pc, #352]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	4a57      	ldr	r2, [pc, #348]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	f023 0304 	bic.w	r3, r3, #4
 8001570:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d015      	beq.n	80015a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157a:	f7ff fb95 	bl	8000ca8 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001580:	e00a      	b.n	8001598 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001582:	f7ff fb91 	bl	8000ca8 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001590:	4293      	cmp	r3, r2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e0b1      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001598:	4b4b      	ldr	r3, [pc, #300]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0ee      	beq.n	8001582 <HAL_RCC_OscConfig+0x37e>
 80015a4:	e014      	b.n	80015d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fb7f 	bl	8000ca8 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ac:	e00a      	b.n	80015c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ae:	f7ff fb7b 	bl	8000ca8 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015bc:	4293      	cmp	r3, r2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e09b      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c4:	4b40      	ldr	r3, [pc, #256]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1ee      	bne.n	80015ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d105      	bne.n	80015e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d6:	4b3c      	ldr	r3, [pc, #240]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a3b      	ldr	r2, [pc, #236]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 8087 	beq.w	80016fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ec:	4b36      	ldr	r3, [pc, #216]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d061      	beq.n	80016bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d146      	bne.n	800168e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001600:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff fb4f 	bl	8000ca8 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160e:	f7ff fb4b 	bl	8000ca8 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e06d      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001620:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001634:	d108      	bne.n	8001648 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	4921      	ldr	r1, [pc, #132]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001648:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a19      	ldr	r1, [r3, #32]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001658:	430b      	orrs	r3, r1
 800165a:	491b      	ldr	r1, [pc, #108]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001666:	f7ff fb1f 	bl	8000ca8 <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166e:	f7ff fb1b 	bl	8000ca8 <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e03d      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0f0      	beq.n	800166e <HAL_RCC_OscConfig+0x46a>
 800168c:	e035      	b.n	80016fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_RCC_OscConfig+0x4cc>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fb08 	bl	8000ca8 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169c:	f7ff fb04 	bl	8000ca8 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e026      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x498>
 80016ba:	e01e      	b.n	80016fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d107      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e019      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40007000 	.word	0x40007000
 80016d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <HAL_RCC_OscConfig+0x500>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d106      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0d0      	b.n	80018be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800171c:	4b6a      	ldr	r3, [pc, #424]	; (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d910      	bls.n	800174c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b67      	ldr	r3, [pc, #412]	; (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 0207 	bic.w	r2, r3, #7
 8001732:	4965      	ldr	r1, [pc, #404]	; (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173a:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0b8      	b.n	80018be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d020      	beq.n	800179a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001764:	4b59      	ldr	r3, [pc, #356]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4a58      	ldr	r2, [pc, #352]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800176e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0308 	and.w	r3, r3, #8
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800177c:	4b53      	ldr	r3, [pc, #332]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4a52      	ldr	r2, [pc, #328]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001786:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001788:	4b50      	ldr	r3, [pc, #320]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	494d      	ldr	r1, [pc, #308]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d040      	beq.n	8001828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d107      	bne.n	80017be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d115      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e07f      	b.n	80018be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c6:	4b41      	ldr	r3, [pc, #260]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e073      	b.n	80018be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d6:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e06b      	b.n	80018be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017e6:	4b39      	ldr	r3, [pc, #228]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f023 0203 	bic.w	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4936      	ldr	r1, [pc, #216]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f8:	f7ff fa56 	bl	8000ca8 <HAL_GetTick>
 80017fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001800:	f7ff fa52 	bl	8000ca8 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	; 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e053      	b.n	80018be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 020c 	and.w	r2, r3, #12
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	429a      	cmp	r2, r3
 8001826:	d1eb      	bne.n	8001800 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d210      	bcs.n	8001858 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 0207 	bic.w	r2, r3, #7
 800183e:	4922      	ldr	r1, [pc, #136]	; (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d001      	beq.n	8001858 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e032      	b.n	80018be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	d008      	beq.n	8001876 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	4916      	ldr	r1, [pc, #88]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	4313      	orrs	r3, r2
 8001874:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	490e      	ldr	r1, [pc, #56]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001896:	f000 f821 	bl	80018dc <HAL_RCC_GetSysClockFreq>
 800189a:	4602      	mov	r2, r0
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	490a      	ldr	r1, [pc, #40]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 80018a8:	5ccb      	ldrb	r3, [r1, r3]
 80018aa:	fa22 f303 	lsr.w	r3, r2, r3
 80018ae:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <HAL_RCC_ClockConfig+0x1cc>)
 80018b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <HAL_RCC_ClockConfig+0x1d0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f9b4 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40022000 	.word	0x40022000
 80018cc:	40021000 	.word	0x40021000
 80018d0:	08002358 	.word	0x08002358
 80018d4:	20000040 	.word	0x20000040
 80018d8:	20000044 	.word	0x20000044

080018dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_RCC_GetSysClockFreq+0x94>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b04      	cmp	r3, #4
 8001904:	d002      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0x30>
 8001906:	2b08      	cmp	r3, #8
 8001908:	d003      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x36>
 800190a:	e027      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_RCC_GetSysClockFreq+0x98>)
 800190e:	613b      	str	r3, [r7, #16]
      break;
 8001910:	e027      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	0c9b      	lsrs	r3, r3, #18
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_RCC_GetSysClockFreq+0x9c>)
 800191c:	5cd3      	ldrb	r3, [r2, r3]
 800191e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d010      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800192a:	4b11      	ldr	r3, [pc, #68]	; (8001970 <HAL_RCC_GetSysClockFreq+0x94>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	0c5b      	lsrs	r3, r3, #17
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	4a11      	ldr	r2, [pc, #68]	; (800197c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001936:	5cd3      	ldrb	r3, [r2, r3]
 8001938:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <HAL_RCC_GetSysClockFreq+0x98>)
 800193e:	fb03 f202 	mul.w	r2, r3, r2
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e004      	b.n	8001956 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	613b      	str	r3, [r7, #16]
      break;
 800195a:	e002      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_RCC_GetSysClockFreq+0x98>)
 800195e:	613b      	str	r3, [r7, #16]
      break;
 8001960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001962:	693b      	ldr	r3, [r7, #16]
}
 8001964:	4618      	mov	r0, r3
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000
 8001974:	007a1200 	.word	0x007a1200
 8001978:	08002368 	.word	0x08002368
 800197c:	08002378 	.word	0x08002378
 8001980:	003d0900 	.word	0x003d0900

08001984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001988:	4b02      	ldr	r3, [pc, #8]	; (8001994 <HAL_RCC_GetHCLKFreq+0x10>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000040 	.word	0x20000040

08001998 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019a0:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <RCC_Delay+0x34>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <RCC_Delay+0x38>)
 80019a6:	fba2 2303 	umull	r2, r3, r2, r3
 80019aa:	0a5b      	lsrs	r3, r3, #9
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019b4:	bf00      	nop
  }
  while (Delay --);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1e5a      	subs	r2, r3, #1
 80019ba:	60fa      	str	r2, [r7, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f9      	bne.n	80019b4 <RCC_Delay+0x1c>
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	20000040 	.word	0x20000040
 80019d0:	10624dd3 	.word	0x10624dd3

080019d4 <__errno>:
 80019d4:	4b01      	ldr	r3, [pc, #4]	; (80019dc <__errno+0x8>)
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	2000004c 	.word	0x2000004c

080019e0 <__libc_init_array>:
 80019e0:	b570      	push	{r4, r5, r6, lr}
 80019e2:	2600      	movs	r6, #0
 80019e4:	4d0c      	ldr	r5, [pc, #48]	; (8001a18 <__libc_init_array+0x38>)
 80019e6:	4c0d      	ldr	r4, [pc, #52]	; (8001a1c <__libc_init_array+0x3c>)
 80019e8:	1b64      	subs	r4, r4, r5
 80019ea:	10a4      	asrs	r4, r4, #2
 80019ec:	42a6      	cmp	r6, r4
 80019ee:	d109      	bne.n	8001a04 <__libc_init_array+0x24>
 80019f0:	f000 fc9c 	bl	800232c <_init>
 80019f4:	2600      	movs	r6, #0
 80019f6:	4d0a      	ldr	r5, [pc, #40]	; (8001a20 <__libc_init_array+0x40>)
 80019f8:	4c0a      	ldr	r4, [pc, #40]	; (8001a24 <__libc_init_array+0x44>)
 80019fa:	1b64      	subs	r4, r4, r5
 80019fc:	10a4      	asrs	r4, r4, #2
 80019fe:	42a6      	cmp	r6, r4
 8001a00:	d105      	bne.n	8001a0e <__libc_init_array+0x2e>
 8001a02:	bd70      	pop	{r4, r5, r6, pc}
 8001a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a08:	4798      	blx	r3
 8001a0a:	3601      	adds	r6, #1
 8001a0c:	e7ee      	b.n	80019ec <__libc_init_array+0xc>
 8001a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a12:	4798      	blx	r3
 8001a14:	3601      	adds	r6, #1
 8001a16:	e7f2      	b.n	80019fe <__libc_init_array+0x1e>
 8001a18:	080023b0 	.word	0x080023b0
 8001a1c:	080023b0 	.word	0x080023b0
 8001a20:	080023b0 	.word	0x080023b0
 8001a24:	080023b4 	.word	0x080023b4

08001a28 <memset>:
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4402      	add	r2, r0
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d100      	bne.n	8001a32 <memset+0xa>
 8001a30:	4770      	bx	lr
 8001a32:	f803 1b01 	strb.w	r1, [r3], #1
 8001a36:	e7f9      	b.n	8001a2c <memset+0x4>

08001a38 <siprintf>:
 8001a38:	b40e      	push	{r1, r2, r3}
 8001a3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001a3e:	b500      	push	{lr}
 8001a40:	b09c      	sub	sp, #112	; 0x70
 8001a42:	ab1d      	add	r3, sp, #116	; 0x74
 8001a44:	9002      	str	r0, [sp, #8]
 8001a46:	9006      	str	r0, [sp, #24]
 8001a48:	9107      	str	r1, [sp, #28]
 8001a4a:	9104      	str	r1, [sp, #16]
 8001a4c:	4808      	ldr	r0, [pc, #32]	; (8001a70 <siprintf+0x38>)
 8001a4e:	4909      	ldr	r1, [pc, #36]	; (8001a74 <siprintf+0x3c>)
 8001a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a54:	9105      	str	r1, [sp, #20]
 8001a56:	6800      	ldr	r0, [r0, #0]
 8001a58:	a902      	add	r1, sp, #8
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	f000 f868 	bl	8001b30 <_svfiprintf_r>
 8001a60:	2200      	movs	r2, #0
 8001a62:	9b02      	ldr	r3, [sp, #8]
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	b01c      	add	sp, #112	; 0x70
 8001a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a6c:	b003      	add	sp, #12
 8001a6e:	4770      	bx	lr
 8001a70:	2000004c 	.word	0x2000004c
 8001a74:	ffff0208 	.word	0xffff0208

08001a78 <__ssputs_r>:
 8001a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a7c:	688e      	ldr	r6, [r1, #8]
 8001a7e:	4682      	mov	sl, r0
 8001a80:	429e      	cmp	r6, r3
 8001a82:	460c      	mov	r4, r1
 8001a84:	4690      	mov	r8, r2
 8001a86:	461f      	mov	r7, r3
 8001a88:	d838      	bhi.n	8001afc <__ssputs_r+0x84>
 8001a8a:	898a      	ldrh	r2, [r1, #12]
 8001a8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001a90:	d032      	beq.n	8001af8 <__ssputs_r+0x80>
 8001a92:	6825      	ldr	r5, [r4, #0]
 8001a94:	6909      	ldr	r1, [r1, #16]
 8001a96:	3301      	adds	r3, #1
 8001a98:	eba5 0901 	sub.w	r9, r5, r1
 8001a9c:	6965      	ldr	r5, [r4, #20]
 8001a9e:	444b      	add	r3, r9
 8001aa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001aa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001aa8:	106d      	asrs	r5, r5, #1
 8001aaa:	429d      	cmp	r5, r3
 8001aac:	bf38      	it	cc
 8001aae:	461d      	movcc	r5, r3
 8001ab0:	0553      	lsls	r3, r2, #21
 8001ab2:	d531      	bpl.n	8001b18 <__ssputs_r+0xa0>
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f000 fb6f 	bl	8002198 <_malloc_r>
 8001aba:	4606      	mov	r6, r0
 8001abc:	b950      	cbnz	r0, 8001ad4 <__ssputs_r+0x5c>
 8001abe:	230c      	movs	r3, #12
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f8ca 3000 	str.w	r3, [sl]
 8001ac8:	89a3      	ldrh	r3, [r4, #12]
 8001aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ace:	81a3      	strh	r3, [r4, #12]
 8001ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ad4:	464a      	mov	r2, r9
 8001ad6:	6921      	ldr	r1, [r4, #16]
 8001ad8:	f000 face 	bl	8002078 <memcpy>
 8001adc:	89a3      	ldrh	r3, [r4, #12]
 8001ade:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae6:	81a3      	strh	r3, [r4, #12]
 8001ae8:	6126      	str	r6, [r4, #16]
 8001aea:	444e      	add	r6, r9
 8001aec:	6026      	str	r6, [r4, #0]
 8001aee:	463e      	mov	r6, r7
 8001af0:	6165      	str	r5, [r4, #20]
 8001af2:	eba5 0509 	sub.w	r5, r5, r9
 8001af6:	60a5      	str	r5, [r4, #8]
 8001af8:	42be      	cmp	r6, r7
 8001afa:	d900      	bls.n	8001afe <__ssputs_r+0x86>
 8001afc:	463e      	mov	r6, r7
 8001afe:	4632      	mov	r2, r6
 8001b00:	4641      	mov	r1, r8
 8001b02:	6820      	ldr	r0, [r4, #0]
 8001b04:	f000 fac6 	bl	8002094 <memmove>
 8001b08:	68a3      	ldr	r3, [r4, #8]
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	1b9b      	subs	r3, r3, r6
 8001b0e:	60a3      	str	r3, [r4, #8]
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	4433      	add	r3, r6
 8001b14:	6023      	str	r3, [r4, #0]
 8001b16:	e7db      	b.n	8001ad0 <__ssputs_r+0x58>
 8001b18:	462a      	mov	r2, r5
 8001b1a:	f000 fbb1 	bl	8002280 <_realloc_r>
 8001b1e:	4606      	mov	r6, r0
 8001b20:	2800      	cmp	r0, #0
 8001b22:	d1e1      	bne.n	8001ae8 <__ssputs_r+0x70>
 8001b24:	4650      	mov	r0, sl
 8001b26:	6921      	ldr	r1, [r4, #16]
 8001b28:	f000 face 	bl	80020c8 <_free_r>
 8001b2c:	e7c7      	b.n	8001abe <__ssputs_r+0x46>
	...

08001b30 <_svfiprintf_r>:
 8001b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b34:	4698      	mov	r8, r3
 8001b36:	898b      	ldrh	r3, [r1, #12]
 8001b38:	4607      	mov	r7, r0
 8001b3a:	061b      	lsls	r3, r3, #24
 8001b3c:	460d      	mov	r5, r1
 8001b3e:	4614      	mov	r4, r2
 8001b40:	b09d      	sub	sp, #116	; 0x74
 8001b42:	d50e      	bpl.n	8001b62 <_svfiprintf_r+0x32>
 8001b44:	690b      	ldr	r3, [r1, #16]
 8001b46:	b963      	cbnz	r3, 8001b62 <_svfiprintf_r+0x32>
 8001b48:	2140      	movs	r1, #64	; 0x40
 8001b4a:	f000 fb25 	bl	8002198 <_malloc_r>
 8001b4e:	6028      	str	r0, [r5, #0]
 8001b50:	6128      	str	r0, [r5, #16]
 8001b52:	b920      	cbnz	r0, 8001b5e <_svfiprintf_r+0x2e>
 8001b54:	230c      	movs	r3, #12
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	e0d1      	b.n	8001d02 <_svfiprintf_r+0x1d2>
 8001b5e:	2340      	movs	r3, #64	; 0x40
 8001b60:	616b      	str	r3, [r5, #20]
 8001b62:	2300      	movs	r3, #0
 8001b64:	9309      	str	r3, [sp, #36]	; 0x24
 8001b66:	2320      	movs	r3, #32
 8001b68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b6c:	2330      	movs	r3, #48	; 0x30
 8001b6e:	f04f 0901 	mov.w	r9, #1
 8001b72:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001d1c <_svfiprintf_r+0x1ec>
 8001b7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001b7e:	4623      	mov	r3, r4
 8001b80:	469a      	mov	sl, r3
 8001b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b86:	b10a      	cbz	r2, 8001b8c <_svfiprintf_r+0x5c>
 8001b88:	2a25      	cmp	r2, #37	; 0x25
 8001b8a:	d1f9      	bne.n	8001b80 <_svfiprintf_r+0x50>
 8001b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8001b90:	d00b      	beq.n	8001baa <_svfiprintf_r+0x7a>
 8001b92:	465b      	mov	r3, fp
 8001b94:	4622      	mov	r2, r4
 8001b96:	4629      	mov	r1, r5
 8001b98:	4638      	mov	r0, r7
 8001b9a:	f7ff ff6d 	bl	8001a78 <__ssputs_r>
 8001b9e:	3001      	adds	r0, #1
 8001ba0:	f000 80aa 	beq.w	8001cf8 <_svfiprintf_r+0x1c8>
 8001ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ba6:	445a      	add	r2, fp
 8001ba8:	9209      	str	r2, [sp, #36]	; 0x24
 8001baa:	f89a 3000 	ldrb.w	r3, [sl]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 80a2 	beq.w	8001cf8 <_svfiprintf_r+0x1c8>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001bbe:	f10a 0a01 	add.w	sl, sl, #1
 8001bc2:	9304      	str	r3, [sp, #16]
 8001bc4:	9307      	str	r3, [sp, #28]
 8001bc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001bca:	931a      	str	r3, [sp, #104]	; 0x68
 8001bcc:	4654      	mov	r4, sl
 8001bce:	2205      	movs	r2, #5
 8001bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bd4:	4851      	ldr	r0, [pc, #324]	; (8001d1c <_svfiprintf_r+0x1ec>)
 8001bd6:	f000 fa41 	bl	800205c <memchr>
 8001bda:	9a04      	ldr	r2, [sp, #16]
 8001bdc:	b9d8      	cbnz	r0, 8001c16 <_svfiprintf_r+0xe6>
 8001bde:	06d0      	lsls	r0, r2, #27
 8001be0:	bf44      	itt	mi
 8001be2:	2320      	movmi	r3, #32
 8001be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001be8:	0711      	lsls	r1, r2, #28
 8001bea:	bf44      	itt	mi
 8001bec:	232b      	movmi	r3, #43	; 0x2b
 8001bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8001bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8001bf8:	d015      	beq.n	8001c26 <_svfiprintf_r+0xf6>
 8001bfa:	4654      	mov	r4, sl
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f04f 0c0a 	mov.w	ip, #10
 8001c02:	9a07      	ldr	r2, [sp, #28]
 8001c04:	4621      	mov	r1, r4
 8001c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c0a:	3b30      	subs	r3, #48	; 0x30
 8001c0c:	2b09      	cmp	r3, #9
 8001c0e:	d94e      	bls.n	8001cae <_svfiprintf_r+0x17e>
 8001c10:	b1b0      	cbz	r0, 8001c40 <_svfiprintf_r+0x110>
 8001c12:	9207      	str	r2, [sp, #28]
 8001c14:	e014      	b.n	8001c40 <_svfiprintf_r+0x110>
 8001c16:	eba0 0308 	sub.w	r3, r0, r8
 8001c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	46a2      	mov	sl, r4
 8001c22:	9304      	str	r3, [sp, #16]
 8001c24:	e7d2      	b.n	8001bcc <_svfiprintf_r+0x9c>
 8001c26:	9b03      	ldr	r3, [sp, #12]
 8001c28:	1d19      	adds	r1, r3, #4
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	9103      	str	r1, [sp, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	bfbb      	ittet	lt
 8001c32:	425b      	neglt	r3, r3
 8001c34:	f042 0202 	orrlt.w	r2, r2, #2
 8001c38:	9307      	strge	r3, [sp, #28]
 8001c3a:	9307      	strlt	r3, [sp, #28]
 8001c3c:	bfb8      	it	lt
 8001c3e:	9204      	strlt	r2, [sp, #16]
 8001c40:	7823      	ldrb	r3, [r4, #0]
 8001c42:	2b2e      	cmp	r3, #46	; 0x2e
 8001c44:	d10c      	bne.n	8001c60 <_svfiprintf_r+0x130>
 8001c46:	7863      	ldrb	r3, [r4, #1]
 8001c48:	2b2a      	cmp	r3, #42	; 0x2a
 8001c4a:	d135      	bne.n	8001cb8 <_svfiprintf_r+0x188>
 8001c4c:	9b03      	ldr	r3, [sp, #12]
 8001c4e:	3402      	adds	r4, #2
 8001c50:	1d1a      	adds	r2, r3, #4
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	9203      	str	r2, [sp, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	bfb8      	it	lt
 8001c5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c5e:	9305      	str	r3, [sp, #20]
 8001c60:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001d20 <_svfiprintf_r+0x1f0>
 8001c64:	2203      	movs	r2, #3
 8001c66:	4650      	mov	r0, sl
 8001c68:	7821      	ldrb	r1, [r4, #0]
 8001c6a:	f000 f9f7 	bl	800205c <memchr>
 8001c6e:	b140      	cbz	r0, 8001c82 <_svfiprintf_r+0x152>
 8001c70:	2340      	movs	r3, #64	; 0x40
 8001c72:	eba0 000a 	sub.w	r0, r0, sl
 8001c76:	fa03 f000 	lsl.w	r0, r3, r0
 8001c7a:	9b04      	ldr	r3, [sp, #16]
 8001c7c:	3401      	adds	r4, #1
 8001c7e:	4303      	orrs	r3, r0
 8001c80:	9304      	str	r3, [sp, #16]
 8001c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c86:	2206      	movs	r2, #6
 8001c88:	4826      	ldr	r0, [pc, #152]	; (8001d24 <_svfiprintf_r+0x1f4>)
 8001c8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001c8e:	f000 f9e5 	bl	800205c <memchr>
 8001c92:	2800      	cmp	r0, #0
 8001c94:	d038      	beq.n	8001d08 <_svfiprintf_r+0x1d8>
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <_svfiprintf_r+0x1f8>)
 8001c98:	bb1b      	cbnz	r3, 8001ce2 <_svfiprintf_r+0x1b2>
 8001c9a:	9b03      	ldr	r3, [sp, #12]
 8001c9c:	3307      	adds	r3, #7
 8001c9e:	f023 0307 	bic.w	r3, r3, #7
 8001ca2:	3308      	adds	r3, #8
 8001ca4:	9303      	str	r3, [sp, #12]
 8001ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ca8:	4433      	add	r3, r6
 8001caa:	9309      	str	r3, [sp, #36]	; 0x24
 8001cac:	e767      	b.n	8001b7e <_svfiprintf_r+0x4e>
 8001cae:	460c      	mov	r4, r1
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cb6:	e7a5      	b.n	8001c04 <_svfiprintf_r+0xd4>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f04f 0c0a 	mov.w	ip, #10
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	3401      	adds	r4, #1
 8001cc2:	9305      	str	r3, [sp, #20]
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001cca:	3a30      	subs	r2, #48	; 0x30
 8001ccc:	2a09      	cmp	r2, #9
 8001cce:	d903      	bls.n	8001cd8 <_svfiprintf_r+0x1a8>
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0c5      	beq.n	8001c60 <_svfiprintf_r+0x130>
 8001cd4:	9105      	str	r1, [sp, #20]
 8001cd6:	e7c3      	b.n	8001c60 <_svfiprintf_r+0x130>
 8001cd8:	4604      	mov	r4, r0
 8001cda:	2301      	movs	r3, #1
 8001cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ce0:	e7f0      	b.n	8001cc4 <_svfiprintf_r+0x194>
 8001ce2:	ab03      	add	r3, sp, #12
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	462a      	mov	r2, r5
 8001ce8:	4638      	mov	r0, r7
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <_svfiprintf_r+0x1fc>)
 8001cec:	a904      	add	r1, sp, #16
 8001cee:	f3af 8000 	nop.w
 8001cf2:	1c42      	adds	r2, r0, #1
 8001cf4:	4606      	mov	r6, r0
 8001cf6:	d1d6      	bne.n	8001ca6 <_svfiprintf_r+0x176>
 8001cf8:	89ab      	ldrh	r3, [r5, #12]
 8001cfa:	065b      	lsls	r3, r3, #25
 8001cfc:	f53f af2c 	bmi.w	8001b58 <_svfiprintf_r+0x28>
 8001d00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d02:	b01d      	add	sp, #116	; 0x74
 8001d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d08:	ab03      	add	r3, sp, #12
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	462a      	mov	r2, r5
 8001d0e:	4638      	mov	r0, r7
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <_svfiprintf_r+0x1fc>)
 8001d12:	a904      	add	r1, sp, #16
 8001d14:	f000 f87c 	bl	8001e10 <_printf_i>
 8001d18:	e7eb      	b.n	8001cf2 <_svfiprintf_r+0x1c2>
 8001d1a:	bf00      	nop
 8001d1c:	0800237a 	.word	0x0800237a
 8001d20:	08002380 	.word	0x08002380
 8001d24:	08002384 	.word	0x08002384
 8001d28:	00000000 	.word	0x00000000
 8001d2c:	08001a79 	.word	0x08001a79

08001d30 <_printf_common>:
 8001d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d34:	4616      	mov	r6, r2
 8001d36:	4699      	mov	r9, r3
 8001d38:	688a      	ldr	r2, [r1, #8]
 8001d3a:	690b      	ldr	r3, [r1, #16]
 8001d3c:	4607      	mov	r7, r0
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	bfb8      	it	lt
 8001d42:	4613      	movlt	r3, r2
 8001d44:	6033      	str	r3, [r6, #0]
 8001d46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d4a:	460c      	mov	r4, r1
 8001d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d50:	b10a      	cbz	r2, 8001d56 <_printf_common+0x26>
 8001d52:	3301      	adds	r3, #1
 8001d54:	6033      	str	r3, [r6, #0]
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	0699      	lsls	r1, r3, #26
 8001d5a:	bf42      	ittt	mi
 8001d5c:	6833      	ldrmi	r3, [r6, #0]
 8001d5e:	3302      	addmi	r3, #2
 8001d60:	6033      	strmi	r3, [r6, #0]
 8001d62:	6825      	ldr	r5, [r4, #0]
 8001d64:	f015 0506 	ands.w	r5, r5, #6
 8001d68:	d106      	bne.n	8001d78 <_printf_common+0x48>
 8001d6a:	f104 0a19 	add.w	sl, r4, #25
 8001d6e:	68e3      	ldr	r3, [r4, #12]
 8001d70:	6832      	ldr	r2, [r6, #0]
 8001d72:	1a9b      	subs	r3, r3, r2
 8001d74:	42ab      	cmp	r3, r5
 8001d76:	dc28      	bgt.n	8001dca <_printf_common+0x9a>
 8001d78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001d7c:	1e13      	subs	r3, r2, #0
 8001d7e:	6822      	ldr	r2, [r4, #0]
 8001d80:	bf18      	it	ne
 8001d82:	2301      	movne	r3, #1
 8001d84:	0692      	lsls	r2, r2, #26
 8001d86:	d42d      	bmi.n	8001de4 <_printf_common+0xb4>
 8001d88:	4649      	mov	r1, r9
 8001d8a:	4638      	mov	r0, r7
 8001d8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d90:	47c0      	blx	r8
 8001d92:	3001      	adds	r0, #1
 8001d94:	d020      	beq.n	8001dd8 <_printf_common+0xa8>
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	68e5      	ldr	r5, [r4, #12]
 8001d9a:	f003 0306 	and.w	r3, r3, #6
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	bf18      	it	ne
 8001da2:	2500      	movne	r5, #0
 8001da4:	6832      	ldr	r2, [r6, #0]
 8001da6:	f04f 0600 	mov.w	r6, #0
 8001daa:	68a3      	ldr	r3, [r4, #8]
 8001dac:	bf08      	it	eq
 8001dae:	1aad      	subeq	r5, r5, r2
 8001db0:	6922      	ldr	r2, [r4, #16]
 8001db2:	bf08      	it	eq
 8001db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001db8:	4293      	cmp	r3, r2
 8001dba:	bfc4      	itt	gt
 8001dbc:	1a9b      	subgt	r3, r3, r2
 8001dbe:	18ed      	addgt	r5, r5, r3
 8001dc0:	341a      	adds	r4, #26
 8001dc2:	42b5      	cmp	r5, r6
 8001dc4:	d11a      	bne.n	8001dfc <_printf_common+0xcc>
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	e008      	b.n	8001ddc <_printf_common+0xac>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	4652      	mov	r2, sl
 8001dce:	4649      	mov	r1, r9
 8001dd0:	4638      	mov	r0, r7
 8001dd2:	47c0      	blx	r8
 8001dd4:	3001      	adds	r0, #1
 8001dd6:	d103      	bne.n	8001de0 <_printf_common+0xb0>
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001de0:	3501      	adds	r5, #1
 8001de2:	e7c4      	b.n	8001d6e <_printf_common+0x3e>
 8001de4:	2030      	movs	r0, #48	; 0x30
 8001de6:	18e1      	adds	r1, r4, r3
 8001de8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001df2:	4422      	add	r2, r4
 8001df4:	3302      	adds	r3, #2
 8001df6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001dfa:	e7c5      	b.n	8001d88 <_printf_common+0x58>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	4622      	mov	r2, r4
 8001e00:	4649      	mov	r1, r9
 8001e02:	4638      	mov	r0, r7
 8001e04:	47c0      	blx	r8
 8001e06:	3001      	adds	r0, #1
 8001e08:	d0e6      	beq.n	8001dd8 <_printf_common+0xa8>
 8001e0a:	3601      	adds	r6, #1
 8001e0c:	e7d9      	b.n	8001dc2 <_printf_common+0x92>
	...

08001e10 <_printf_i>:
 8001e10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e14:	7e0f      	ldrb	r7, [r1, #24]
 8001e16:	4691      	mov	r9, r2
 8001e18:	2f78      	cmp	r7, #120	; 0x78
 8001e1a:	4680      	mov	r8, r0
 8001e1c:	460c      	mov	r4, r1
 8001e1e:	469a      	mov	sl, r3
 8001e20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001e22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001e26:	d807      	bhi.n	8001e38 <_printf_i+0x28>
 8001e28:	2f62      	cmp	r7, #98	; 0x62
 8001e2a:	d80a      	bhi.n	8001e42 <_printf_i+0x32>
 8001e2c:	2f00      	cmp	r7, #0
 8001e2e:	f000 80d9 	beq.w	8001fe4 <_printf_i+0x1d4>
 8001e32:	2f58      	cmp	r7, #88	; 0x58
 8001e34:	f000 80a4 	beq.w	8001f80 <_printf_i+0x170>
 8001e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001e40:	e03a      	b.n	8001eb8 <_printf_i+0xa8>
 8001e42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001e46:	2b15      	cmp	r3, #21
 8001e48:	d8f6      	bhi.n	8001e38 <_printf_i+0x28>
 8001e4a:	a101      	add	r1, pc, #4	; (adr r1, 8001e50 <_printf_i+0x40>)
 8001e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e50:	08001ea9 	.word	0x08001ea9
 8001e54:	08001ebd 	.word	0x08001ebd
 8001e58:	08001e39 	.word	0x08001e39
 8001e5c:	08001e39 	.word	0x08001e39
 8001e60:	08001e39 	.word	0x08001e39
 8001e64:	08001e39 	.word	0x08001e39
 8001e68:	08001ebd 	.word	0x08001ebd
 8001e6c:	08001e39 	.word	0x08001e39
 8001e70:	08001e39 	.word	0x08001e39
 8001e74:	08001e39 	.word	0x08001e39
 8001e78:	08001e39 	.word	0x08001e39
 8001e7c:	08001fcb 	.word	0x08001fcb
 8001e80:	08001eed 	.word	0x08001eed
 8001e84:	08001fad 	.word	0x08001fad
 8001e88:	08001e39 	.word	0x08001e39
 8001e8c:	08001e39 	.word	0x08001e39
 8001e90:	08001fed 	.word	0x08001fed
 8001e94:	08001e39 	.word	0x08001e39
 8001e98:	08001eed 	.word	0x08001eed
 8001e9c:	08001e39 	.word	0x08001e39
 8001ea0:	08001e39 	.word	0x08001e39
 8001ea4:	08001fb5 	.word	0x08001fb5
 8001ea8:	682b      	ldr	r3, [r5, #0]
 8001eaa:	1d1a      	adds	r2, r3, #4
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	602a      	str	r2, [r5, #0]
 8001eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001eb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0a4      	b.n	8002006 <_printf_i+0x1f6>
 8001ebc:	6820      	ldr	r0, [r4, #0]
 8001ebe:	6829      	ldr	r1, [r5, #0]
 8001ec0:	0606      	lsls	r6, r0, #24
 8001ec2:	f101 0304 	add.w	r3, r1, #4
 8001ec6:	d50a      	bpl.n	8001ede <_printf_i+0xce>
 8001ec8:	680e      	ldr	r6, [r1, #0]
 8001eca:	602b      	str	r3, [r5, #0]
 8001ecc:	2e00      	cmp	r6, #0
 8001ece:	da03      	bge.n	8001ed8 <_printf_i+0xc8>
 8001ed0:	232d      	movs	r3, #45	; 0x2d
 8001ed2:	4276      	negs	r6, r6
 8001ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ed8:	230a      	movs	r3, #10
 8001eda:	485e      	ldr	r0, [pc, #376]	; (8002054 <_printf_i+0x244>)
 8001edc:	e019      	b.n	8001f12 <_printf_i+0x102>
 8001ede:	680e      	ldr	r6, [r1, #0]
 8001ee0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001ee4:	602b      	str	r3, [r5, #0]
 8001ee6:	bf18      	it	ne
 8001ee8:	b236      	sxthne	r6, r6
 8001eea:	e7ef      	b.n	8001ecc <_printf_i+0xbc>
 8001eec:	682b      	ldr	r3, [r5, #0]
 8001eee:	6820      	ldr	r0, [r4, #0]
 8001ef0:	1d19      	adds	r1, r3, #4
 8001ef2:	6029      	str	r1, [r5, #0]
 8001ef4:	0601      	lsls	r1, r0, #24
 8001ef6:	d501      	bpl.n	8001efc <_printf_i+0xec>
 8001ef8:	681e      	ldr	r6, [r3, #0]
 8001efa:	e002      	b.n	8001f02 <_printf_i+0xf2>
 8001efc:	0646      	lsls	r6, r0, #25
 8001efe:	d5fb      	bpl.n	8001ef8 <_printf_i+0xe8>
 8001f00:	881e      	ldrh	r6, [r3, #0]
 8001f02:	2f6f      	cmp	r7, #111	; 0x6f
 8001f04:	bf0c      	ite	eq
 8001f06:	2308      	moveq	r3, #8
 8001f08:	230a      	movne	r3, #10
 8001f0a:	4852      	ldr	r0, [pc, #328]	; (8002054 <_printf_i+0x244>)
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f12:	6865      	ldr	r5, [r4, #4]
 8001f14:	2d00      	cmp	r5, #0
 8001f16:	bfa8      	it	ge
 8001f18:	6821      	ldrge	r1, [r4, #0]
 8001f1a:	60a5      	str	r5, [r4, #8]
 8001f1c:	bfa4      	itt	ge
 8001f1e:	f021 0104 	bicge.w	r1, r1, #4
 8001f22:	6021      	strge	r1, [r4, #0]
 8001f24:	b90e      	cbnz	r6, 8001f2a <_printf_i+0x11a>
 8001f26:	2d00      	cmp	r5, #0
 8001f28:	d04d      	beq.n	8001fc6 <_printf_i+0x1b6>
 8001f2a:	4615      	mov	r5, r2
 8001f2c:	fbb6 f1f3 	udiv	r1, r6, r3
 8001f30:	fb03 6711 	mls	r7, r3, r1, r6
 8001f34:	5dc7      	ldrb	r7, [r0, r7]
 8001f36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001f3a:	4637      	mov	r7, r6
 8001f3c:	42bb      	cmp	r3, r7
 8001f3e:	460e      	mov	r6, r1
 8001f40:	d9f4      	bls.n	8001f2c <_printf_i+0x11c>
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d10b      	bne.n	8001f5e <_printf_i+0x14e>
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	07de      	lsls	r6, r3, #31
 8001f4a:	d508      	bpl.n	8001f5e <_printf_i+0x14e>
 8001f4c:	6923      	ldr	r3, [r4, #16]
 8001f4e:	6861      	ldr	r1, [r4, #4]
 8001f50:	4299      	cmp	r1, r3
 8001f52:	bfde      	ittt	le
 8001f54:	2330      	movle	r3, #48	; 0x30
 8001f56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001f5e:	1b52      	subs	r2, r2, r5
 8001f60:	6122      	str	r2, [r4, #16]
 8001f62:	464b      	mov	r3, r9
 8001f64:	4621      	mov	r1, r4
 8001f66:	4640      	mov	r0, r8
 8001f68:	f8cd a000 	str.w	sl, [sp]
 8001f6c:	aa03      	add	r2, sp, #12
 8001f6e:	f7ff fedf 	bl	8001d30 <_printf_common>
 8001f72:	3001      	adds	r0, #1
 8001f74:	d14c      	bne.n	8002010 <_printf_i+0x200>
 8001f76:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7a:	b004      	add	sp, #16
 8001f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f80:	4834      	ldr	r0, [pc, #208]	; (8002054 <_printf_i+0x244>)
 8001f82:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001f86:	6829      	ldr	r1, [r5, #0]
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	f851 6b04 	ldr.w	r6, [r1], #4
 8001f8e:	6029      	str	r1, [r5, #0]
 8001f90:	061d      	lsls	r5, r3, #24
 8001f92:	d514      	bpl.n	8001fbe <_printf_i+0x1ae>
 8001f94:	07df      	lsls	r7, r3, #31
 8001f96:	bf44      	itt	mi
 8001f98:	f043 0320 	orrmi.w	r3, r3, #32
 8001f9c:	6023      	strmi	r3, [r4, #0]
 8001f9e:	b91e      	cbnz	r6, 8001fa8 <_printf_i+0x198>
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	f023 0320 	bic.w	r3, r3, #32
 8001fa6:	6023      	str	r3, [r4, #0]
 8001fa8:	2310      	movs	r3, #16
 8001faa:	e7af      	b.n	8001f0c <_printf_i+0xfc>
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	f043 0320 	orr.w	r3, r3, #32
 8001fb2:	6023      	str	r3, [r4, #0]
 8001fb4:	2378      	movs	r3, #120	; 0x78
 8001fb6:	4828      	ldr	r0, [pc, #160]	; (8002058 <_printf_i+0x248>)
 8001fb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001fbc:	e7e3      	b.n	8001f86 <_printf_i+0x176>
 8001fbe:	0659      	lsls	r1, r3, #25
 8001fc0:	bf48      	it	mi
 8001fc2:	b2b6      	uxthmi	r6, r6
 8001fc4:	e7e6      	b.n	8001f94 <_printf_i+0x184>
 8001fc6:	4615      	mov	r5, r2
 8001fc8:	e7bb      	b.n	8001f42 <_printf_i+0x132>
 8001fca:	682b      	ldr	r3, [r5, #0]
 8001fcc:	6826      	ldr	r6, [r4, #0]
 8001fce:	1d18      	adds	r0, r3, #4
 8001fd0:	6961      	ldr	r1, [r4, #20]
 8001fd2:	6028      	str	r0, [r5, #0]
 8001fd4:	0635      	lsls	r5, r6, #24
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	d501      	bpl.n	8001fde <_printf_i+0x1ce>
 8001fda:	6019      	str	r1, [r3, #0]
 8001fdc:	e002      	b.n	8001fe4 <_printf_i+0x1d4>
 8001fde:	0670      	lsls	r0, r6, #25
 8001fe0:	d5fb      	bpl.n	8001fda <_printf_i+0x1ca>
 8001fe2:	8019      	strh	r1, [r3, #0]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	4615      	mov	r5, r2
 8001fe8:	6123      	str	r3, [r4, #16]
 8001fea:	e7ba      	b.n	8001f62 <_printf_i+0x152>
 8001fec:	682b      	ldr	r3, [r5, #0]
 8001fee:	2100      	movs	r1, #0
 8001ff0:	1d1a      	adds	r2, r3, #4
 8001ff2:	602a      	str	r2, [r5, #0]
 8001ff4:	681d      	ldr	r5, [r3, #0]
 8001ff6:	6862      	ldr	r2, [r4, #4]
 8001ff8:	4628      	mov	r0, r5
 8001ffa:	f000 f82f 	bl	800205c <memchr>
 8001ffe:	b108      	cbz	r0, 8002004 <_printf_i+0x1f4>
 8002000:	1b40      	subs	r0, r0, r5
 8002002:	6060      	str	r0, [r4, #4]
 8002004:	6863      	ldr	r3, [r4, #4]
 8002006:	6123      	str	r3, [r4, #16]
 8002008:	2300      	movs	r3, #0
 800200a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800200e:	e7a8      	b.n	8001f62 <_printf_i+0x152>
 8002010:	462a      	mov	r2, r5
 8002012:	4649      	mov	r1, r9
 8002014:	4640      	mov	r0, r8
 8002016:	6923      	ldr	r3, [r4, #16]
 8002018:	47d0      	blx	sl
 800201a:	3001      	adds	r0, #1
 800201c:	d0ab      	beq.n	8001f76 <_printf_i+0x166>
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	079b      	lsls	r3, r3, #30
 8002022:	d413      	bmi.n	800204c <_printf_i+0x23c>
 8002024:	68e0      	ldr	r0, [r4, #12]
 8002026:	9b03      	ldr	r3, [sp, #12]
 8002028:	4298      	cmp	r0, r3
 800202a:	bfb8      	it	lt
 800202c:	4618      	movlt	r0, r3
 800202e:	e7a4      	b.n	8001f7a <_printf_i+0x16a>
 8002030:	2301      	movs	r3, #1
 8002032:	4632      	mov	r2, r6
 8002034:	4649      	mov	r1, r9
 8002036:	4640      	mov	r0, r8
 8002038:	47d0      	blx	sl
 800203a:	3001      	adds	r0, #1
 800203c:	d09b      	beq.n	8001f76 <_printf_i+0x166>
 800203e:	3501      	adds	r5, #1
 8002040:	68e3      	ldr	r3, [r4, #12]
 8002042:	9903      	ldr	r1, [sp, #12]
 8002044:	1a5b      	subs	r3, r3, r1
 8002046:	42ab      	cmp	r3, r5
 8002048:	dcf2      	bgt.n	8002030 <_printf_i+0x220>
 800204a:	e7eb      	b.n	8002024 <_printf_i+0x214>
 800204c:	2500      	movs	r5, #0
 800204e:	f104 0619 	add.w	r6, r4, #25
 8002052:	e7f5      	b.n	8002040 <_printf_i+0x230>
 8002054:	0800238b 	.word	0x0800238b
 8002058:	0800239c 	.word	0x0800239c

0800205c <memchr>:
 800205c:	4603      	mov	r3, r0
 800205e:	b510      	push	{r4, lr}
 8002060:	b2c9      	uxtb	r1, r1
 8002062:	4402      	add	r2, r0
 8002064:	4293      	cmp	r3, r2
 8002066:	4618      	mov	r0, r3
 8002068:	d101      	bne.n	800206e <memchr+0x12>
 800206a:	2000      	movs	r0, #0
 800206c:	e003      	b.n	8002076 <memchr+0x1a>
 800206e:	7804      	ldrb	r4, [r0, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	428c      	cmp	r4, r1
 8002074:	d1f6      	bne.n	8002064 <memchr+0x8>
 8002076:	bd10      	pop	{r4, pc}

08002078 <memcpy>:
 8002078:	440a      	add	r2, r1
 800207a:	4291      	cmp	r1, r2
 800207c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002080:	d100      	bne.n	8002084 <memcpy+0xc>
 8002082:	4770      	bx	lr
 8002084:	b510      	push	{r4, lr}
 8002086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800208a:	4291      	cmp	r1, r2
 800208c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002090:	d1f9      	bne.n	8002086 <memcpy+0xe>
 8002092:	bd10      	pop	{r4, pc}

08002094 <memmove>:
 8002094:	4288      	cmp	r0, r1
 8002096:	b510      	push	{r4, lr}
 8002098:	eb01 0402 	add.w	r4, r1, r2
 800209c:	d902      	bls.n	80020a4 <memmove+0x10>
 800209e:	4284      	cmp	r4, r0
 80020a0:	4623      	mov	r3, r4
 80020a2:	d807      	bhi.n	80020b4 <memmove+0x20>
 80020a4:	1e43      	subs	r3, r0, #1
 80020a6:	42a1      	cmp	r1, r4
 80020a8:	d008      	beq.n	80020bc <memmove+0x28>
 80020aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80020ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80020b2:	e7f8      	b.n	80020a6 <memmove+0x12>
 80020b4:	4601      	mov	r1, r0
 80020b6:	4402      	add	r2, r0
 80020b8:	428a      	cmp	r2, r1
 80020ba:	d100      	bne.n	80020be <memmove+0x2a>
 80020bc:	bd10      	pop	{r4, pc}
 80020be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80020c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80020c6:	e7f7      	b.n	80020b8 <memmove+0x24>

080020c8 <_free_r>:
 80020c8:	b538      	push	{r3, r4, r5, lr}
 80020ca:	4605      	mov	r5, r0
 80020cc:	2900      	cmp	r1, #0
 80020ce:	d040      	beq.n	8002152 <_free_r+0x8a>
 80020d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020d4:	1f0c      	subs	r4, r1, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	bfb8      	it	lt
 80020da:	18e4      	addlt	r4, r4, r3
 80020dc:	f000 f910 	bl	8002300 <__malloc_lock>
 80020e0:	4a1c      	ldr	r2, [pc, #112]	; (8002154 <_free_r+0x8c>)
 80020e2:	6813      	ldr	r3, [r2, #0]
 80020e4:	b933      	cbnz	r3, 80020f4 <_free_r+0x2c>
 80020e6:	6063      	str	r3, [r4, #4]
 80020e8:	6014      	str	r4, [r2, #0]
 80020ea:	4628      	mov	r0, r5
 80020ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020f0:	f000 b90c 	b.w	800230c <__malloc_unlock>
 80020f4:	42a3      	cmp	r3, r4
 80020f6:	d908      	bls.n	800210a <_free_r+0x42>
 80020f8:	6820      	ldr	r0, [r4, #0]
 80020fa:	1821      	adds	r1, r4, r0
 80020fc:	428b      	cmp	r3, r1
 80020fe:	bf01      	itttt	eq
 8002100:	6819      	ldreq	r1, [r3, #0]
 8002102:	685b      	ldreq	r3, [r3, #4]
 8002104:	1809      	addeq	r1, r1, r0
 8002106:	6021      	streq	r1, [r4, #0]
 8002108:	e7ed      	b.n	80020e6 <_free_r+0x1e>
 800210a:	461a      	mov	r2, r3
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	b10b      	cbz	r3, 8002114 <_free_r+0x4c>
 8002110:	42a3      	cmp	r3, r4
 8002112:	d9fa      	bls.n	800210a <_free_r+0x42>
 8002114:	6811      	ldr	r1, [r2, #0]
 8002116:	1850      	adds	r0, r2, r1
 8002118:	42a0      	cmp	r0, r4
 800211a:	d10b      	bne.n	8002134 <_free_r+0x6c>
 800211c:	6820      	ldr	r0, [r4, #0]
 800211e:	4401      	add	r1, r0
 8002120:	1850      	adds	r0, r2, r1
 8002122:	4283      	cmp	r3, r0
 8002124:	6011      	str	r1, [r2, #0]
 8002126:	d1e0      	bne.n	80020ea <_free_r+0x22>
 8002128:	6818      	ldr	r0, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4401      	add	r1, r0
 800212e:	6011      	str	r1, [r2, #0]
 8002130:	6053      	str	r3, [r2, #4]
 8002132:	e7da      	b.n	80020ea <_free_r+0x22>
 8002134:	d902      	bls.n	800213c <_free_r+0x74>
 8002136:	230c      	movs	r3, #12
 8002138:	602b      	str	r3, [r5, #0]
 800213a:	e7d6      	b.n	80020ea <_free_r+0x22>
 800213c:	6820      	ldr	r0, [r4, #0]
 800213e:	1821      	adds	r1, r4, r0
 8002140:	428b      	cmp	r3, r1
 8002142:	bf01      	itttt	eq
 8002144:	6819      	ldreq	r1, [r3, #0]
 8002146:	685b      	ldreq	r3, [r3, #4]
 8002148:	1809      	addeq	r1, r1, r0
 800214a:	6021      	streq	r1, [r4, #0]
 800214c:	6063      	str	r3, [r4, #4]
 800214e:	6054      	str	r4, [r2, #4]
 8002150:	e7cb      	b.n	80020ea <_free_r+0x22>
 8002152:	bd38      	pop	{r3, r4, r5, pc}
 8002154:	200000ec 	.word	0x200000ec

08002158 <sbrk_aligned>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	4e0e      	ldr	r6, [pc, #56]	; (8002194 <sbrk_aligned+0x3c>)
 800215c:	460c      	mov	r4, r1
 800215e:	6831      	ldr	r1, [r6, #0]
 8002160:	4605      	mov	r5, r0
 8002162:	b911      	cbnz	r1, 800216a <sbrk_aligned+0x12>
 8002164:	f000 f8bc 	bl	80022e0 <_sbrk_r>
 8002168:	6030      	str	r0, [r6, #0]
 800216a:	4621      	mov	r1, r4
 800216c:	4628      	mov	r0, r5
 800216e:	f000 f8b7 	bl	80022e0 <_sbrk_r>
 8002172:	1c43      	adds	r3, r0, #1
 8002174:	d00a      	beq.n	800218c <sbrk_aligned+0x34>
 8002176:	1cc4      	adds	r4, r0, #3
 8002178:	f024 0403 	bic.w	r4, r4, #3
 800217c:	42a0      	cmp	r0, r4
 800217e:	d007      	beq.n	8002190 <sbrk_aligned+0x38>
 8002180:	1a21      	subs	r1, r4, r0
 8002182:	4628      	mov	r0, r5
 8002184:	f000 f8ac 	bl	80022e0 <_sbrk_r>
 8002188:	3001      	adds	r0, #1
 800218a:	d101      	bne.n	8002190 <sbrk_aligned+0x38>
 800218c:	f04f 34ff 	mov.w	r4, #4294967295
 8002190:	4620      	mov	r0, r4
 8002192:	bd70      	pop	{r4, r5, r6, pc}
 8002194:	200000f0 	.word	0x200000f0

08002198 <_malloc_r>:
 8002198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800219c:	1ccd      	adds	r5, r1, #3
 800219e:	f025 0503 	bic.w	r5, r5, #3
 80021a2:	3508      	adds	r5, #8
 80021a4:	2d0c      	cmp	r5, #12
 80021a6:	bf38      	it	cc
 80021a8:	250c      	movcc	r5, #12
 80021aa:	2d00      	cmp	r5, #0
 80021ac:	4607      	mov	r7, r0
 80021ae:	db01      	blt.n	80021b4 <_malloc_r+0x1c>
 80021b0:	42a9      	cmp	r1, r5
 80021b2:	d905      	bls.n	80021c0 <_malloc_r+0x28>
 80021b4:	230c      	movs	r3, #12
 80021b6:	2600      	movs	r6, #0
 80021b8:	603b      	str	r3, [r7, #0]
 80021ba:	4630      	mov	r0, r6
 80021bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021c0:	4e2e      	ldr	r6, [pc, #184]	; (800227c <_malloc_r+0xe4>)
 80021c2:	f000 f89d 	bl	8002300 <__malloc_lock>
 80021c6:	6833      	ldr	r3, [r6, #0]
 80021c8:	461c      	mov	r4, r3
 80021ca:	bb34      	cbnz	r4, 800221a <_malloc_r+0x82>
 80021cc:	4629      	mov	r1, r5
 80021ce:	4638      	mov	r0, r7
 80021d0:	f7ff ffc2 	bl	8002158 <sbrk_aligned>
 80021d4:	1c43      	adds	r3, r0, #1
 80021d6:	4604      	mov	r4, r0
 80021d8:	d14d      	bne.n	8002276 <_malloc_r+0xde>
 80021da:	6834      	ldr	r4, [r6, #0]
 80021dc:	4626      	mov	r6, r4
 80021de:	2e00      	cmp	r6, #0
 80021e0:	d140      	bne.n	8002264 <_malloc_r+0xcc>
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	4631      	mov	r1, r6
 80021e6:	4638      	mov	r0, r7
 80021e8:	eb04 0803 	add.w	r8, r4, r3
 80021ec:	f000 f878 	bl	80022e0 <_sbrk_r>
 80021f0:	4580      	cmp	r8, r0
 80021f2:	d13a      	bne.n	800226a <_malloc_r+0xd2>
 80021f4:	6821      	ldr	r1, [r4, #0]
 80021f6:	3503      	adds	r5, #3
 80021f8:	1a6d      	subs	r5, r5, r1
 80021fa:	f025 0503 	bic.w	r5, r5, #3
 80021fe:	3508      	adds	r5, #8
 8002200:	2d0c      	cmp	r5, #12
 8002202:	bf38      	it	cc
 8002204:	250c      	movcc	r5, #12
 8002206:	4638      	mov	r0, r7
 8002208:	4629      	mov	r1, r5
 800220a:	f7ff ffa5 	bl	8002158 <sbrk_aligned>
 800220e:	3001      	adds	r0, #1
 8002210:	d02b      	beq.n	800226a <_malloc_r+0xd2>
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	442b      	add	r3, r5
 8002216:	6023      	str	r3, [r4, #0]
 8002218:	e00e      	b.n	8002238 <_malloc_r+0xa0>
 800221a:	6822      	ldr	r2, [r4, #0]
 800221c:	1b52      	subs	r2, r2, r5
 800221e:	d41e      	bmi.n	800225e <_malloc_r+0xc6>
 8002220:	2a0b      	cmp	r2, #11
 8002222:	d916      	bls.n	8002252 <_malloc_r+0xba>
 8002224:	1961      	adds	r1, r4, r5
 8002226:	42a3      	cmp	r3, r4
 8002228:	6025      	str	r5, [r4, #0]
 800222a:	bf18      	it	ne
 800222c:	6059      	strne	r1, [r3, #4]
 800222e:	6863      	ldr	r3, [r4, #4]
 8002230:	bf08      	it	eq
 8002232:	6031      	streq	r1, [r6, #0]
 8002234:	5162      	str	r2, [r4, r5]
 8002236:	604b      	str	r3, [r1, #4]
 8002238:	4638      	mov	r0, r7
 800223a:	f104 060b 	add.w	r6, r4, #11
 800223e:	f000 f865 	bl	800230c <__malloc_unlock>
 8002242:	f026 0607 	bic.w	r6, r6, #7
 8002246:	1d23      	adds	r3, r4, #4
 8002248:	1af2      	subs	r2, r6, r3
 800224a:	d0b6      	beq.n	80021ba <_malloc_r+0x22>
 800224c:	1b9b      	subs	r3, r3, r6
 800224e:	50a3      	str	r3, [r4, r2]
 8002250:	e7b3      	b.n	80021ba <_malloc_r+0x22>
 8002252:	6862      	ldr	r2, [r4, #4]
 8002254:	42a3      	cmp	r3, r4
 8002256:	bf0c      	ite	eq
 8002258:	6032      	streq	r2, [r6, #0]
 800225a:	605a      	strne	r2, [r3, #4]
 800225c:	e7ec      	b.n	8002238 <_malloc_r+0xa0>
 800225e:	4623      	mov	r3, r4
 8002260:	6864      	ldr	r4, [r4, #4]
 8002262:	e7b2      	b.n	80021ca <_malloc_r+0x32>
 8002264:	4634      	mov	r4, r6
 8002266:	6876      	ldr	r6, [r6, #4]
 8002268:	e7b9      	b.n	80021de <_malloc_r+0x46>
 800226a:	230c      	movs	r3, #12
 800226c:	4638      	mov	r0, r7
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	f000 f84c 	bl	800230c <__malloc_unlock>
 8002274:	e7a1      	b.n	80021ba <_malloc_r+0x22>
 8002276:	6025      	str	r5, [r4, #0]
 8002278:	e7de      	b.n	8002238 <_malloc_r+0xa0>
 800227a:	bf00      	nop
 800227c:	200000ec 	.word	0x200000ec

08002280 <_realloc_r>:
 8002280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002284:	4680      	mov	r8, r0
 8002286:	4614      	mov	r4, r2
 8002288:	460e      	mov	r6, r1
 800228a:	b921      	cbnz	r1, 8002296 <_realloc_r+0x16>
 800228c:	4611      	mov	r1, r2
 800228e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002292:	f7ff bf81 	b.w	8002198 <_malloc_r>
 8002296:	b92a      	cbnz	r2, 80022a4 <_realloc_r+0x24>
 8002298:	f7ff ff16 	bl	80020c8 <_free_r>
 800229c:	4625      	mov	r5, r4
 800229e:	4628      	mov	r0, r5
 80022a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022a4:	f000 f838 	bl	8002318 <_malloc_usable_size_r>
 80022a8:	4284      	cmp	r4, r0
 80022aa:	4607      	mov	r7, r0
 80022ac:	d802      	bhi.n	80022b4 <_realloc_r+0x34>
 80022ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80022b2:	d812      	bhi.n	80022da <_realloc_r+0x5a>
 80022b4:	4621      	mov	r1, r4
 80022b6:	4640      	mov	r0, r8
 80022b8:	f7ff ff6e 	bl	8002198 <_malloc_r>
 80022bc:	4605      	mov	r5, r0
 80022be:	2800      	cmp	r0, #0
 80022c0:	d0ed      	beq.n	800229e <_realloc_r+0x1e>
 80022c2:	42bc      	cmp	r4, r7
 80022c4:	4622      	mov	r2, r4
 80022c6:	4631      	mov	r1, r6
 80022c8:	bf28      	it	cs
 80022ca:	463a      	movcs	r2, r7
 80022cc:	f7ff fed4 	bl	8002078 <memcpy>
 80022d0:	4631      	mov	r1, r6
 80022d2:	4640      	mov	r0, r8
 80022d4:	f7ff fef8 	bl	80020c8 <_free_r>
 80022d8:	e7e1      	b.n	800229e <_realloc_r+0x1e>
 80022da:	4635      	mov	r5, r6
 80022dc:	e7df      	b.n	800229e <_realloc_r+0x1e>
	...

080022e0 <_sbrk_r>:
 80022e0:	b538      	push	{r3, r4, r5, lr}
 80022e2:	2300      	movs	r3, #0
 80022e4:	4d05      	ldr	r5, [pc, #20]	; (80022fc <_sbrk_r+0x1c>)
 80022e6:	4604      	mov	r4, r0
 80022e8:	4608      	mov	r0, r1
 80022ea:	602b      	str	r3, [r5, #0]
 80022ec:	f7fe f8da 	bl	80004a4 <_sbrk>
 80022f0:	1c43      	adds	r3, r0, #1
 80022f2:	d102      	bne.n	80022fa <_sbrk_r+0x1a>
 80022f4:	682b      	ldr	r3, [r5, #0]
 80022f6:	b103      	cbz	r3, 80022fa <_sbrk_r+0x1a>
 80022f8:	6023      	str	r3, [r4, #0]
 80022fa:	bd38      	pop	{r3, r4, r5, pc}
 80022fc:	200000f4 	.word	0x200000f4

08002300 <__malloc_lock>:
 8002300:	4801      	ldr	r0, [pc, #4]	; (8002308 <__malloc_lock+0x8>)
 8002302:	f000 b811 	b.w	8002328 <__retarget_lock_acquire_recursive>
 8002306:	bf00      	nop
 8002308:	200000f8 	.word	0x200000f8

0800230c <__malloc_unlock>:
 800230c:	4801      	ldr	r0, [pc, #4]	; (8002314 <__malloc_unlock+0x8>)
 800230e:	f000 b80c 	b.w	800232a <__retarget_lock_release_recursive>
 8002312:	bf00      	nop
 8002314:	200000f8 	.word	0x200000f8

08002318 <_malloc_usable_size_r>:
 8002318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800231c:	1f18      	subs	r0, r3, #4
 800231e:	2b00      	cmp	r3, #0
 8002320:	bfbc      	itt	lt
 8002322:	580b      	ldrlt	r3, [r1, r0]
 8002324:	18c0      	addlt	r0, r0, r3
 8002326:	4770      	bx	lr

08002328 <__retarget_lock_acquire_recursive>:
 8002328:	4770      	bx	lr

0800232a <__retarget_lock_release_recursive>:
 800232a:	4770      	bx	lr

0800232c <_init>:
 800232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232e:	bf00      	nop
 8002330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002332:	bc08      	pop	{r3}
 8002334:	469e      	mov	lr, r3
 8002336:	4770      	bx	lr

08002338 <_fini>:
 8002338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233a:	bf00      	nop
 800233c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233e:	bc08      	pop	{r3}
 8002340:	469e      	mov	lr, r3
 8002342:	4770      	bx	lr
