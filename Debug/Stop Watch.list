
Stop Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002184  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002290  08002290  00012290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022fc  080022fc  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  080022fc  080022fc  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022fc  080022fc  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022fc  080022fc  000122fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002300  08002300  00012300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08002304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  200000b0  080023b4  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080023b4  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e60  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013c1  00000000  00000000  00023f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000500  00000000  00000000  00025300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000438  00000000  00000000  00025800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017577  00000000  00000000  00025c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d77  00000000  00000000  0003d1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000805ce  00000000  00000000  00043f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c44f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001568  00000000  00000000  000c4544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002278 	.word	0x08002278

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	08002278 	.word	0x08002278

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fcf7 	bl	8000b44 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f8dd 	bl	8000314 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 f921 	bl	80003a0 <MX_GPIO_Init>

	/* USER CODE BEGIN 2 */
	Alcd_Init(&lcd1, 2, 16);
 800015e:	2210      	movs	r2, #16
 8000160:	2102      	movs	r1, #2
 8000162:	4862      	ldr	r0, [pc, #392]	; (80002ec <main+0x1a0>)
 8000164:	f000 fb1a 	bl	800079c <Alcd_Init>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000168:	4b61      	ldr	r3, [pc, #388]	; (80002f0 <main+0x1a4>)
 800016a:	699b      	ldr	r3, [r3, #24]
 800016c:	4a60      	ldr	r2, [pc, #384]	; (80002f0 <main+0x1a4>)
 800016e:	f043 0308 	orr.w	r3, r3, #8
 8000172:	6193      	str	r3, [r2, #24]
 8000174:	4b5e      	ldr	r3, [pc, #376]	; (80002f0 <main+0x1a4>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	f003 0308 	and.w	r3, r3, #8
 800017c:	60bb      	str	r3, [r7, #8]
 800017e:	68bb      	ldr	r3, [r7, #8]
	Keypad_Matrix_init(&matrix1);
 8000180:	485c      	ldr	r0, [pc, #368]	; (80002f4 <main+0x1a8>)
 8000182:	f000 fcb9 	bl	8000af8 <Keypad_Matrix_init>
	GPIO_InitTypeDef FGC = { .Mode = GPIO_MODE_OUTPUT_PP, // Output Push Pull Mode
 8000186:	f107 030c 	add.w	r3, r7, #12
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
 8000194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000198:	60fb      	str	r3, [r7, #12]
 800019a:	2301      	movs	r3, #1
 800019c:	613b      	str	r3, [r7, #16]
 800019e:	2302      	movs	r3, #2
 80001a0:	61bb      	str	r3, [r7, #24]
			.Speed = GPIO_SPEED_LOW, .Pin = GPIO_PIN_13 };
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80001a2:	4b53      	ldr	r3, [pc, #332]	; (80002f0 <main+0x1a4>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	4a52      	ldr	r2, [pc, #328]	; (80002f0 <main+0x1a4>)
 80001a8:	f043 0310 	orr.w	r3, r3, #16
 80001ac:	6193      	str	r3, [r2, #24]
 80001ae:	4b50      	ldr	r3, [pc, #320]	; (80002f0 <main+0x1a4>)
 80001b0:	699b      	ldr	r3, [r3, #24]
 80001b2:	f003 0310 	and.w	r3, r3, #16
 80001b6:	607b      	str	r3, [r7, #4]
 80001b8:	687b      	ldr	r3, [r7, #4]
	HAL_GPIO_Init(GPIOC, &FGC);
 80001ba:	f107 030c 	add.w	r3, r7, #12
 80001be:	4619      	mov	r1, r3
 80001c0:	484d      	ldr	r0, [pc, #308]	; (80002f8 <main+0x1ac>)
 80001c2:	f000 fe29 	bl	8000e18 <HAL_GPIO_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

	if (Keypad_Matrix_ReadKey(&matrix1, 1)) {
 80001c6:	2101      	movs	r1, #1
 80001c8:	484a      	ldr	r0, [pc, #296]	; (80002f4 <main+0x1a8>)
 80001ca:	f000 fca4 	bl	8000b16 <Keypad_Matrix_ReadKey>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d05b      	beq.n	800028c <main+0x140>
		HAL_Delay(100);
 80001d4:	2064      	movs	r0, #100	; 0x64
 80001d6:	f000 fd17 	bl	8000c08 <HAL_Delay>
		SS++;
 80001da:	4b48      	ldr	r3, [pc, #288]	; (80002fc <main+0x1b0>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	3301      	adds	r3, #1
 80001e0:	b2da      	uxtb	r2, r3
 80001e2:	4b46      	ldr	r3, [pc, #280]	; (80002fc <main+0x1b0>)
 80001e4:	701a      	strb	r2, [r3, #0]

		if (SS == 60) {
 80001e6:	4b45      	ldr	r3, [pc, #276]	; (80002fc <main+0x1b0>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	2b3c      	cmp	r3, #60	; 0x3c
 80001ec:	d108      	bne.n	8000200 <main+0xb4>
			MM++;
 80001ee:	4b44      	ldr	r3, [pc, #272]	; (8000300 <main+0x1b4>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	3301      	adds	r3, #1
 80001f4:	b2da      	uxtb	r2, r3
 80001f6:	4b42      	ldr	r3, [pc, #264]	; (8000300 <main+0x1b4>)
 80001f8:	701a      	strb	r2, [r3, #0]
			SS = 0;
 80001fa:	4b40      	ldr	r3, [pc, #256]	; (80002fc <main+0x1b0>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	701a      	strb	r2, [r3, #0]
		}

		if (MM == 59 && SS == 60) {
 8000200:	4b3f      	ldr	r3, [pc, #252]	; (8000300 <main+0x1b4>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	2b3b      	cmp	r3, #59	; 0x3b
 8000206:	d10f      	bne.n	8000228 <main+0xdc>
 8000208:	4b3c      	ldr	r3, [pc, #240]	; (80002fc <main+0x1b0>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	2b3c      	cmp	r3, #60	; 0x3c
 800020e:	d10b      	bne.n	8000228 <main+0xdc>
			HH++;
 8000210:	4b3c      	ldr	r3, [pc, #240]	; (8000304 <main+0x1b8>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	3301      	adds	r3, #1
 8000216:	b2da      	uxtb	r2, r3
 8000218:	4b3a      	ldr	r3, [pc, #232]	; (8000304 <main+0x1b8>)
 800021a:	701a      	strb	r2, [r3, #0]
			MM = 0;
 800021c:	4b38      	ldr	r3, [pc, #224]	; (8000300 <main+0x1b4>)
 800021e:	2200      	movs	r2, #0
 8000220:	701a      	strb	r2, [r3, #0]
			SS = 0;
 8000222:	4b36      	ldr	r3, [pc, #216]	; (80002fc <main+0x1b0>)
 8000224:	2200      	movs	r2, #0
 8000226:	701a      	strb	r2, [r3, #0]
		}

		if (HH == 23 && MM == 59 && SS == 60) {
 8000228:	4b36      	ldr	r3, [pc, #216]	; (8000304 <main+0x1b8>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b17      	cmp	r3, #23
 800022e:	d110      	bne.n	8000252 <main+0x106>
 8000230:	4b33      	ldr	r3, [pc, #204]	; (8000300 <main+0x1b4>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b3b      	cmp	r3, #59	; 0x3b
 8000236:	d10c      	bne.n	8000252 <main+0x106>
 8000238:	4b30      	ldr	r3, [pc, #192]	; (80002fc <main+0x1b0>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b3c      	cmp	r3, #60	; 0x3c
 800023e:	d108      	bne.n	8000252 <main+0x106>
			HH = 0;
 8000240:	4b30      	ldr	r3, [pc, #192]	; (8000304 <main+0x1b8>)
 8000242:	2200      	movs	r2, #0
 8000244:	701a      	strb	r2, [r3, #0]
			MM = 0;
 8000246:	4b2e      	ldr	r3, [pc, #184]	; (8000300 <main+0x1b4>)
 8000248:	2200      	movs	r2, #0
 800024a:	701a      	strb	r2, [r3, #0]
			SS = 0;
 800024c:	4b2b      	ldr	r3, [pc, #172]	; (80002fc <main+0x1b0>)
 800024e:	2200      	movs	r2, #0
 8000250:	701a      	strb	r2, [r3, #0]
		}
		uint8_t length = sprintf(str, "%02d:%02d:%02d:%02d", HH, MM, SS, MS);
 8000252:	4b2c      	ldr	r3, [pc, #176]	; (8000304 <main+0x1b8>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	4619      	mov	r1, r3
 8000258:	4b29      	ldr	r3, [pc, #164]	; (8000300 <main+0x1b4>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	4618      	mov	r0, r3
 800025e:	4b27      	ldr	r3, [pc, #156]	; (80002fc <main+0x1b0>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	461a      	mov	r2, r3
 8000264:	4b28      	ldr	r3, [pc, #160]	; (8000308 <main+0x1bc>)
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	9301      	str	r3, [sp, #4]
 800026a:	9200      	str	r2, [sp, #0]
 800026c:	4603      	mov	r3, r0
 800026e:	460a      	mov	r2, r1
 8000270:	4926      	ldr	r1, [pc, #152]	; (800030c <main+0x1c0>)
 8000272:	4827      	ldr	r0, [pc, #156]	; (8000310 <main+0x1c4>)
 8000274:	f001 fb86 	bl	8001984 <siprintf>
 8000278:	4603      	mov	r3, r0
 800027a:	77fb      	strb	r3, [r7, #31]
		Alcd_PutAt_n(&lcd1, 0, 0, str, length);
 800027c:	7ffb      	ldrb	r3, [r7, #31]
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	4b23      	ldr	r3, [pc, #140]	; (8000310 <main+0x1c4>)
 8000282:	2200      	movs	r2, #0
 8000284:	2100      	movs	r1, #0
 8000286:	4819      	ldr	r0, [pc, #100]	; (80002ec <main+0x1a0>)
 8000288:	f000 fb43 	bl	8000912 <Alcd_PutAt_n>
	}
	if (Keypad_Matrix_ReadKey(&matrix1, 2)) {
 800028c:	2102      	movs	r1, #2
 800028e:	4819      	ldr	r0, [pc, #100]	; (80002f4 <main+0x1a8>)
 8000290:	f000 fc41 	bl	8000b16 <Keypad_Matrix_ReadKey>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d01c      	beq.n	80002d4 <main+0x188>

		uint8_t length = sprintf(str, "%02d:%02d:%02d:%02d", HH, MM, SS, MS);
 800029a:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <main+0x1b8>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	4619      	mov	r1, r3
 80002a0:	4b17      	ldr	r3, [pc, #92]	; (8000300 <main+0x1b4>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	4618      	mov	r0, r3
 80002a6:	4b15      	ldr	r3, [pc, #84]	; (80002fc <main+0x1b0>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	461a      	mov	r2, r3
 80002ac:	4b16      	ldr	r3, [pc, #88]	; (8000308 <main+0x1bc>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	9301      	str	r3, [sp, #4]
 80002b2:	9200      	str	r2, [sp, #0]
 80002b4:	4603      	mov	r3, r0
 80002b6:	460a      	mov	r2, r1
 80002b8:	4914      	ldr	r1, [pc, #80]	; (800030c <main+0x1c0>)
 80002ba:	4815      	ldr	r0, [pc, #84]	; (8000310 <main+0x1c4>)
 80002bc:	f001 fb62 	bl	8001984 <siprintf>
 80002c0:	4603      	mov	r3, r0
 80002c2:	77bb      	strb	r3, [r7, #30]
		Alcd_PutAt_n(&lcd1, 0, 0, str, length);
 80002c4:	7fbb      	ldrb	r3, [r7, #30]
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <main+0x1c4>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	2100      	movs	r1, #0
 80002ce:	4807      	ldr	r0, [pc, #28]	; (80002ec <main+0x1a0>)
 80002d0:	f000 fb1f 	bl	8000912 <Alcd_PutAt_n>
	}
	if (Keypad_Matrix_ReadKey(&matrix1, 3)) {
 80002d4:	2103      	movs	r1, #3
 80002d6:	4807      	ldr	r0, [pc, #28]	; (80002f4 <main+0x1a8>)
 80002d8:	f000 fc1d 	bl	8000b16 <Keypad_Matrix_ReadKey>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f43f af71 	beq.w	80001c6 <main+0x7a>
		Alcd_Clear (&lcd1);
 80002e4:	4801      	ldr	r0, [pc, #4]	; (80002ec <main+0x1a0>)
 80002e6:	f000 fb2d 	bl	8000944 <Alcd_Clear>
	if (Keypad_Matrix_ReadKey(&matrix1, 1)) {
 80002ea:	e76c      	b.n	80001c6 <main+0x7a>
 80002ec:	20000020 	.word	0x20000020
 80002f0:	40021000 	.word	0x40021000
 80002f4:	20000000 	.word	0x20000000
 80002f8:	40011000 	.word	0x40011000
 80002fc:	200000de 	.word	0x200000de
 8000300:	200000dd 	.word	0x200000dd
 8000304:	200000dc 	.word	0x200000dc
 8000308:	200000df 	.word	0x200000df
 800030c:	08002290 	.word	0x08002290
 8000310:	200000cc 	.word	0x200000cc

08000314 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b090      	sub	sp, #64	; 0x40
 8000318:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	2228      	movs	r2, #40	; 0x28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f001 fb26 	bl	8001974 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]

/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000336:	2301      	movs	r3, #1
 8000338:	61bb      	str	r3, [r7, #24]
RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800033a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033e:	61fb      	str	r3, [r7, #28]
RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	623b      	str	r3, [r7, #32]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000344:	2301      	movs	r3, #1
 8000346:	62bb      	str	r3, [r7, #40]	; 0x28
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000348:	2302      	movs	r3, #2
 800034a:	637b      	str	r3, [r7, #52]	; 0x34
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000350:	63bb      	str	r3, [r7, #56]	; 0x38
RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000352:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000356:	63fb      	str	r3, [r7, #60]	; 0x3c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000358:	f107 0318 	add.w	r3, r7, #24
 800035c:	4618      	mov	r0, r3
 800035e:	f000 fef7 	bl	8001150 <HAL_RCC_OscConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x58>
	Error_Handler();
 8000368:	f000 f83c 	bl	80003e4 <Error_Handler>
}

/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800036c:	230f      	movs	r3, #15
 800036e:	607b      	str	r3, [r7, #4]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000370:	2302      	movs	r3, #2
 8000372:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037c:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2102      	movs	r1, #2
 8000386:	4618      	mov	r0, r3
 8000388:	f001 f964 	bl	8001654 <HAL_RCC_ClockConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x82>
	Error_Handler();
 8000392:	f000 f827 	bl	80003e4 <Error_Handler>
}
}
 8000396:	bf00      	nop
 8000398:	3740      	adds	r7, #64	; 0x40
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOD_CLK_ENABLE();
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	4a0d      	ldr	r2, [pc, #52]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003ac:	f043 0320 	orr.w	r3, r3, #32
 80003b0:	6193      	str	r3, [r2, #24]
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	f003 0320 	and.w	r3, r3, #32
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]
__HAL_RCC_GPIOA_CLK_ENABLE();
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003c4:	f043 0304 	orr.w	r3, r3, #4
 80003c8:	6193      	str	r3, [r2, #24]
 80003ca:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <MX_GPIO_Init+0x40>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	f003 0304 	and.w	r3, r3, #4
 80003d2:	603b      	str	r3, [r7, #0]
 80003d4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	40021000 	.word	0x40021000

080003e4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e8:	b672      	cpsid	i
}
 80003ea:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 80003ec:	e7fe      	b.n	80003ec <Error_Handler+0x8>
	...

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <HAL_MspInit+0x5c>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a14      	ldr	r2, [pc, #80]	; (800044c <HAL_MspInit+0x5c>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	60bb      	str	r3, [r7, #8]
 800040c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <HAL_MspInit+0x5c>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a0e      	ldr	r2, [pc, #56]	; (800044c <HAL_MspInit+0x5c>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b0c      	ldr	r3, [pc, #48]	; (800044c <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <HAL_MspInit+0x60>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <HAL_MspInit+0x60>)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40021000 	.word	0x40021000
 8000450:	40010000 	.word	0x40010000

08000454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <NMI_Handler+0x4>

0800045a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045e:	e7fe      	b.n	800045e <HardFault_Handler+0x4>

08000460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <MemManage_Handler+0x4>

08000466 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <BusFault_Handler+0x4>

0800046c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <UsageFault_Handler+0x4>

08000472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr

0800047e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr

0800048a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049a:	f000 fb99 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004ac:	4a14      	ldr	r2, [pc, #80]	; (8000500 <_sbrk+0x5c>)
 80004ae:	4b15      	ldr	r3, [pc, #84]	; (8000504 <_sbrk+0x60>)
 80004b0:	1ad3      	subs	r3, r2, r3
 80004b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004b8:	4b13      	ldr	r3, [pc, #76]	; (8000508 <_sbrk+0x64>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d102      	bne.n	80004c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004c0:	4b11      	ldr	r3, [pc, #68]	; (8000508 <_sbrk+0x64>)
 80004c2:	4a12      	ldr	r2, [pc, #72]	; (800050c <_sbrk+0x68>)
 80004c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <_sbrk+0x64>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4413      	add	r3, r2
 80004ce:	693a      	ldr	r2, [r7, #16]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d207      	bcs.n	80004e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004d4:	f001 fa24 	bl	8001920 <__errno>
 80004d8:	4603      	mov	r3, r0
 80004da:	220c      	movs	r2, #12
 80004dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004de:	f04f 33ff 	mov.w	r3, #4294967295
 80004e2:	e009      	b.n	80004f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <_sbrk+0x64>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ea:	4b07      	ldr	r3, [pc, #28]	; (8000508 <_sbrk+0x64>)
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4413      	add	r3, r2
 80004f2:	4a05      	ldr	r2, [pc, #20]	; (8000508 <_sbrk+0x64>)
 80004f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004f6:	68fb      	ldr	r3, [r7, #12]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3718      	adds	r7, #24
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20005000 	.word	0x20005000
 8000504:	00000400 	.word	0x00000400
 8000508:	200000e0 	.word	0x200000e0
 800050c:	200000f8 	.word	0x200000f8

08000510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800051c:	f7ff fff8 	bl	8000510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480b      	ldr	r0, [pc, #44]	; (8000550 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000522:	490c      	ldr	r1, [pc, #48]	; (8000554 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000524:	4a0c      	ldr	r2, [pc, #48]	; (8000558 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a09      	ldr	r2, [pc, #36]	; (800055c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000538:	4c09      	ldr	r4, [pc, #36]	; (8000560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000546:	f001 f9f1 	bl	800192c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054a:	f7ff fdff 	bl	800014c <main>
  bx lr
 800054e:	4770      	bx	lr
  ldr r0, =_sdata
 8000550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000554:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000558:	08002304 	.word	0x08002304
  ldr r2, =_sbss
 800055c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000560:	200000f8 	.word	0x200000f8

08000564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <ADC1_2_IRQHandler>
	...

08000568 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800056c:	4b14      	ldr	r3, [pc, #80]	; (80005c0 <DWT_Delay_Init+0x58>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <DWT_Delay_Init+0x58>)
 8000572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000576:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <DWT_Delay_Init+0x58>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <DWT_Delay_Init+0x58>)
 800057e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000582:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <DWT_Delay_Init+0x5c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <DWT_Delay_Init+0x5c>)
 800058a:	f023 0301 	bic.w	r3, r3, #1
 800058e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <DWT_Delay_Init+0x5c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <DWT_Delay_Init+0x5c>)
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <DWT_Delay_Init+0x5c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80005a2:	bf00      	nop
     __ASM volatile ("NOP");
 80005a4:	bf00      	nop
  __ASM volatile ("NOP");
 80005a6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <DWT_Delay_Init+0x5c>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80005b0:	2300      	movs	r3, #0
 80005b2:	e000      	b.n	80005b6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80005b4:	2301      	movs	r3, #1
  }
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e000edf0 	.word	0xe000edf0
 80005c4:	e0001000 	.word	0xe0001000

080005c8 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 80005d0:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <DWT_Delay_us+0x40>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80005d6:	f001 f97b 	bl	80018d0 <HAL_RCC_GetHCLKFreq>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a0b      	ldr	r2, [pc, #44]	; (800060c <DWT_Delay_us+0x44>)
 80005de:	fba2 2303 	umull	r2, r3, r2, r3
 80005e2:	0c9b      	lsrs	r3, r3, #18
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	fb02 f303 	mul.w	r3, r2, r3
 80005ea:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 80005ec:	bf00      	nop
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <DWT_Delay_us+0x40>)
 80005f0:	685a      	ldr	r2, [r3, #4]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	1ad2      	subs	r2, r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d3f8      	bcc.n	80005ee <DWT_Delay_us+0x26>
		;
}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	e0001000 	.word	0xe0001000
 800060c:	431bde83 	.word	0x431bde83

08000610 <usDelay>:
    EN_SET(lcd,0);    \
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 800061a:	88fb      	ldrh	r3, [r7, #6]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffd3 	bl	80005c8 <DWT_Delay_us>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte) {
 800062a:	b480      	push	{r7}
 800062c:	b083      	sub	sp, #12
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	460b      	mov	r3, r1
 8000634:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	68da      	ldr	r2, [r3, #12]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	7a1b      	ldrb	r3, [r3, #8]
 8000640:	4619      	mov	r1, r3
 8000642:	230f      	movs	r3, #15
 8000644:	408b      	lsls	r3, r1
 8000646:	43db      	mvns	r3, r3
 8000648:	4619      	mov	r1, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	400a      	ands	r2, r1
 8000650:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	68da      	ldr	r2, [r3, #12]
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	7a09      	ldrb	r1, [r1, #8]
 800065e:	408b      	lsls	r3, r1
 8000660:	4619      	mov	r1, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	430a      	orrs	r2, r1
 8000668:	60da      	str	r2, [r3, #12]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	460b      	mov	r3, r1
 800067e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6958      	ldr	r0, [r3, #20]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	8b1b      	ldrh	r3, [r3, #24]
 8000688:	78fa      	ldrb	r2, [r7, #3]
 800068a:	4619      	mov	r1, r3
 800068c:	f000 fd48 	bl	8001120 <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	68d8      	ldr	r0, [r3, #12]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	8a1b      	ldrh	r3, [r3, #16]
 80006ac:	78fa      	ldrb	r2, [r7, #3]
 80006ae:	4619      	mov	r1, r3
 80006b0:	f000 fd36 	bl	8001120 <HAL_GPIO_WritePin>
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G = { .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin,
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	8b1b      	ldrh	r3, [r3, #24]
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	2301      	movs	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	2302      	movs	r3, #2
 80006de:	617b      	str	r3, [r7, #20]
			.Speed = GPIO_SPEED_FREQ_LOW };
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	f107 0208 	add.w	r2, r7, #8
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fb94 	bl	8000e18 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	8a1b      	ldrh	r3, [r3, #16]
 80006f4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f107 0208 	add.w	r2, r7, #8
 80006fe:	4611      	mov	r1, r2
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fb89 	bl	8000e18 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7a1b      	ldrb	r3, [r3, #8]
 800070a:	461a      	mov	r2, r3
 800070c:	230f      	movs	r3, #15
 800070e:	4093      	lsls	r3, r2
 8000710:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	f107 0208 	add.w	r2, r7, #8
 800071a:	4611      	mov	r1, r2
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fb7b 	bl	8000e18 <HAL_GPIO_Init>
}
 8000722:	bf00      	nop
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value) {
 800072a:	b580      	push	{r7, lr}
 800072c:	b082      	sub	sp, #8
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	460b      	mov	r3, r1
 8000734:	70fb      	strb	r3, [r7, #3]
 8000736:	4613      	mov	r3, r2
 8000738:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 800073a:	78fb      	ldrb	r3, [r7, #3]
 800073c:	4619      	mov	r1, r3
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f7ff ff98 	bl	8000674 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8000744:	78bb      	ldrb	r3, [r7, #2]
 8000746:	091b      	lsrs	r3, r3, #4
 8000748:	b2db      	uxtb	r3, r3
 800074a:	4619      	mov	r1, r3
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff ff6c 	bl	800062a <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8000752:	2101      	movs	r1, #1
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff9f 	bl	8000698 <EN_SET>
 800075a:	200a      	movs	r0, #10
 800075c:	f7ff ff58 	bl	8000610 <usDelay>
 8000760:	2100      	movs	r1, #0
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff ff98 	bl	8000698 <EN_SET>
 8000768:	2064      	movs	r0, #100	; 0x64
 800076a:	f7ff ff51 	bl	8000610 <usDelay>
	;
	Write_HalfByte(lcd, value);
 800076e:	78bb      	ldrb	r3, [r7, #2]
 8000770:	4619      	mov	r1, r3
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ff59 	bl	800062a <Write_HalfByte>
	PulseEn
 8000778:	2101      	movs	r1, #1
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f7ff ff8c 	bl	8000698 <EN_SET>
 8000780:	200a      	movs	r0, #10
 8000782:	f7ff ff45 	bl	8000610 <usDelay>
 8000786:	2100      	movs	r1, #0
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff85 	bl	8000698 <EN_SET>
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f7ff ff3e 	bl	8000610 <usDelay>
	;
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
 80007a8:	4613      	mov	r3, r2
 80007aa:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 80007ac:	f7ff fedc 	bl	8000568 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff83 	bl	80006bc <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2200      	movs	r2, #0
 80007ba:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2240      	movs	r2, #64	; 0x40
 80007c0:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	78ba      	ldrb	r2, [r7, #2]
 80007c6:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 80007c8:	78bb      	ldrb	r3, [r7, #2]
 80007ca:	3340      	adds	r3, #64	; 0x40
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 80007d2:	2100      	movs	r1, #0
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f7ff ff4d 	bl	8000674 <RS_SET>
	EN_SET(lcd, 0);
 80007da:	2100      	movs	r1, #0
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff5b 	bl	8000698 <EN_SET>
	usDelay(50000);
 80007e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80007e6:	f7ff ff13 	bl	8000610 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	e018      	b.n	8000822 <Alcd_Init+0x86>
		Write_HalfByte(lcd, 0x03);
 80007f0:	2103      	movs	r1, #3
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ff19 	bl	800062a <Write_HalfByte>
		PulseEn
 80007f8:	2101      	movs	r1, #1
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff4c 	bl	8000698 <EN_SET>
 8000800:	200a      	movs	r0, #10
 8000802:	f7ff ff05 	bl	8000610 <usDelay>
 8000806:	2100      	movs	r1, #0
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff45 	bl	8000698 <EN_SET>
 800080e:	2064      	movs	r0, #100	; 0x64
 8000810:	f7ff fefe 	bl	8000610 <usDelay>
		;
		usDelay(4500);
 8000814:	f241 1094 	movw	r0, #4500	; 0x1194
 8000818:	f7ff fefa 	bl	8000610 <usDelay>
	for (x = 0; x < 2; x++) {
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	3301      	adds	r3, #1
 8000820:	73fb      	strb	r3, [r7, #15]
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d9e3      	bls.n	80007f0 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 8000828:	2103      	movs	r1, #3
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f7ff fefd 	bl	800062a <Write_HalfByte>
	PulseEn
 8000830:	2101      	movs	r1, #1
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ff30 	bl	8000698 <EN_SET>
 8000838:	200a      	movs	r0, #10
 800083a:	f7ff fee9 	bl	8000610 <usDelay>
 800083e:	2100      	movs	r1, #0
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff29 	bl	8000698 <EN_SET>
 8000846:	2064      	movs	r0, #100	; 0x64
 8000848:	f7ff fee2 	bl	8000610 <usDelay>
	;
	usDelay(150);
 800084c:	2096      	movs	r0, #150	; 0x96
 800084e:	f7ff fedf 	bl	8000610 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8000852:	2102      	movs	r1, #2
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff fee8 	bl	800062a <Write_HalfByte>
	PulseEn
 800085a:	2101      	movs	r1, #1
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff1b 	bl	8000698 <EN_SET>
 8000862:	200a      	movs	r0, #10
 8000864:	f7ff fed4 	bl	8000610 <usDelay>
 8000868:	2100      	movs	r1, #0
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ff14 	bl	8000698 <EN_SET>
 8000870:	2064      	movs	r0, #100	; 0x64
 8000872:	f7ff fecd 	bl	8000610 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8000876:	2228      	movs	r2, #40	; 0x28
 8000878:	2100      	movs	r1, #0
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff55 	bl	800072a <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8000880:	2300      	movs	r3, #0
 8000882:	2200      	movs	r2, #0
 8000884:	2101      	movs	r1, #1
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f000 f86d 	bl	8000966 <Alcd_Display_Control>
	Alcd_Clear(lcd);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f859 	bl	8000944 <Alcd_Clear>
}
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col) {
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70fb      	strb	r3, [r7, #3]
 80008a6:	4613      	mov	r3, r2
 80008a8:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 80008aa:	78fb      	ldrb	r3, [r7, #3]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	4413      	add	r3, r2
 80008b0:	7e9a      	ldrb	r2, [r3, #26]
 80008b2:	78bb      	ldrb	r3, [r7, #2]
 80008b4:	4413      	add	r3, r2
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008be:	b25b      	sxtb	r3, r3
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	2100      	movs	r1, #0
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ff2f 	bl	800072a <Alcd_SendByte>
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	4613      	mov	r3, r2
 80008e0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	75fb      	strb	r3, [r7, #23]
 80008e6:	e00b      	b.n	8000900 <Alcd_Put_n+0x2c>
		SendByte(1, *(text++));
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	60ba      	str	r2, [r7, #8]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	2101      	movs	r1, #1
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff ff18 	bl	800072a <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++) {
 80008fa:	7dfb      	ldrb	r3, [r7, #23]
 80008fc:	3301      	adds	r3, #1
 80008fe:	75fb      	strb	r3, [r7, #23]
 8000900:	7dfa      	ldrb	r2, [r7, #23]
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	429a      	cmp	r2, r3
 8000906:	d3ef      	bcc.n	80008e8 <Alcd_Put_n+0x14>
	}
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text,
		uint8_t len) {
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	72fb      	strb	r3, [r7, #11]
 8000920:	4613      	mov	r3, r2
 8000922:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8000924:	7aba      	ldrb	r2, [r7, #10]
 8000926:	7afb      	ldrb	r3, [r7, #11]
 8000928:	4619      	mov	r1, r3
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f7ff ffb5 	bl	800089a <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8000930:	7e3b      	ldrb	r3, [r7, #24]
 8000932:	461a      	mov	r2, r3
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	68f8      	ldr	r0, [r7, #12]
 8000938:	f7ff ffcc 	bl	80008d4 <Alcd_Put_n>
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <Alcd_Clear>:
void Alcd_Home(Alcd_t *lcd) {
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 800094c:	2201      	movs	r2, #1
 800094e:	2100      	movs	r1, #0
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff feea 	bl	800072a <Alcd_SendByte>
	usDelay(2000);
 8000956:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800095a:	f7ff fe59 	bl	8000610 <usDelay>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF,
		uint8_t BLINK_ON_OFF) {
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	4608      	mov	r0, r1
 8000970:	4611      	mov	r1, r2
 8000972:	461a      	mov	r2, r3
 8000974:	4603      	mov	r3, r0
 8000976:	70fb      	strb	r3, [r7, #3]
 8000978:	460b      	mov	r3, r1
 800097a:	70bb      	strb	r3, [r7, #2]
 800097c:	4613      	mov	r3, r2
 800097e:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	779a      	strb	r2, [r3, #30]
	if (ON_OFF) {
 8000986:	78fb      	ldrb	r3, [r7, #3]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d006      	beq.n	800099a <Alcd_Display_Control+0x34>
		lcd->_displaycontrol |= LCD_DISPLAYON;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	7f9b      	ldrb	r3, [r3, #30]
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	b2da      	uxtb	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF) {
 800099a:	78bb      	ldrb	r3, [r7, #2]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d006      	beq.n	80009ae <Alcd_Display_Control+0x48>
		lcd->_displaycontrol |= LCD_CURSORON;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7f9b      	ldrb	r3, [r3, #30]
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF) {
 80009ae:	787b      	ldrb	r3, [r7, #1]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d006      	beq.n	80009c2 <Alcd_Display_Control+0x5c>
		lcd->_displaycontrol |= LCD_BLINKON;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	7f9b      	ldrb	r3, [r3, #30]
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	7f9b      	ldrb	r3, [r3, #30]
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7f9b      	ldrb	r3, [r3, #30]
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	461a      	mov	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f7ff fea3 	bl	800072a <Alcd_SendByte>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <Hardware_Interface_Initialize>:
#include "../matrix_keypad/matrix_keypad.h"

static void Hardware_Interface_Initialize(Keypad_Matrix_t *kp) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GP = { .Mode = GPIO_MODE_OUTPUT_PP, // Output Push Pull Mode
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	2301      	movs	r3, #1
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
			.Speed = GPIO_SPEED_LOW };
	uint32_t Pins = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < kp->Rows; x++) {
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
 8000a12:	e00e      	b.n	8000a32 <Hardware_Interface_Initialize+0x46>
		Pins |= 1 << ((kp->Row_Start_Pin) + x);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	7b1b      	ldrb	r3, [r3, #12]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	6a3b      	ldr	r3, [r7, #32]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	2201      	movs	r2, #1
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	461a      	mov	r2, r3
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < kp->Rows; x++) {
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	623b      	str	r3, [r7, #32]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	6a3b      	ldr	r3, [r7, #32]
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	dbea      	blt.n	8000a14 <Hardware_Interface_Initialize+0x28>
	};
	GP.Pin = Pins;
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(kp->Row_Port, &GP);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	f107 020c 	add.w	r2, r7, #12
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 f9e3 	bl	8000e18 <HAL_GPIO_Init>

	kp->Output_Mask = Pins;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a56:	61da      	str	r2, [r3, #28]
	GP.Mode = GPIO_MODE_INPUT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
	GP.Pull = GPIO_PULLDOWN;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	617b      	str	r3, [r7, #20]
	Pins = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < kp->Columns; x++) {
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	e00e      	b.n	8000a88 <Hardware_Interface_Initialize+0x9c>
		Pins |= 1 << ((kp->Column_Start_Pin) + x);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	7d1b      	ldrb	r3, [r3, #20]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	4413      	add	r3, r2
 8000a74:	2201      	movs	r2, #1
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
	for (int x = 0; x < kp->Columns; x++) {
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3301      	adds	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	785b      	ldrb	r3, [r3, #1]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	4293      	cmp	r3, r2
 8000a92:	dbea      	blt.n	8000a6a <Hardware_Interface_Initialize+0x7e>
	};
	GP.Pin = Pins;
 8000a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a96:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(kp->Column_Port, &GP);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	691b      	ldr	r3, [r3, #16]
 8000a9c:	f107 020c 	add.w	r2, r7, #12
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 f9b8 	bl	8000e18 <HAL_GPIO_Init>
	kp->Input_Mask = Pins;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aac:	619a      	str	r2, [r3, #24]
}
 8000aae:	bf00      	nop
 8000ab0:	3728      	adds	r7, #40	; 0x28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <Hardware_Set_Outputs>:
	m >>= kp->Column_Start_Pin;
	return (uint8_t) m;

}

static void Hardware_Set_Outputs(Keypad_Matrix_t *kp, uint8_t OutputStatus) {
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	70fb      	strb	r3, [r7, #3]
	kp->Row_Port->ODR &= ~(kp->Output_Mask);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	68d9      	ldr	r1, [r3, #12]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	69db      	ldr	r3, [r3, #28]
 8000acc:	43da      	mvns	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	400a      	ands	r2, r1
 8000ad4:	60da      	str	r2, [r3, #12]
	kp->Row_Port->ODR |= ((uint32_t) OutputStatus) << kp->Row_Start_Pin;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	68d9      	ldr	r1, [r3, #12]
 8000adc:	78fb      	ldrb	r3, [r7, #3]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	7b12      	ldrb	r2, [r2, #12]
 8000ae2:	fa03 f202 	lsl.w	r2, r3, r2
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	60da      	str	r2, [r3, #12]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <Keypad_Matrix_init>:

void Keypad_Matrix_init(Keypad_Matrix_t *kp) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	Hardware_Interface_Initialize(kp);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff73 	bl	80009ec <Hardware_Interface_Initialize>
	Hardware_Set_Outputs(kp, 0);
 8000b06:	2100      	movs	r1, #0
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ffd4 	bl	8000ab6 <Hardware_Set_Outputs>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <Keypad_Matrix_ReadKey>:
		kp->Button_Status |= Hardware_Get_Inputs(kp) << (x * kp->Columns);
		scan <<= 1;
	}
}

uint8_t Keypad_Matrix_ReadKey(Keypad_Matrix_t *kp, uint8_t key) {
 8000b16:	b480      	push	{r7}
 8000b18:	b083      	sub	sp, #12
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	70fb      	strb	r3, [r7, #3]
	if (kp->Button_Status & (1 << key)) {
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	78fa      	ldrb	r2, [r7, #3]
 8000b28:	2101      	movs	r1, #1
 8000b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2e:	4013      	ands	r3, r2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <Keypad_Matrix_ReadKey+0x22>
		return 1;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <Keypad_Matrix_ReadKey+0x24>
	} else {
		return 0;
 8000b38:	2300      	movs	r3, #0
	}
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_Init+0x28>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_Init+0x28>)
 8000b4e:	f043 0310 	orr.w	r3, r3, #16
 8000b52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f92b 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f000 f808 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff fc46 	bl	80003f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40022000 	.word	0x40022000

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_InitTick+0x54>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_InitTick+0x58>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f935 	bl	8000dfe <HAL_SYSTICK_Config>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00e      	b.n	8000bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d80a      	bhi.n	8000bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f000 f90b 	bl	8000dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb0:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <HAL_InitTick+0x5c>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e000      	b.n	8000bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000040 	.word	0x20000040
 8000bc8:	20000048 	.word	0x20000048
 8000bcc:	20000044 	.word	0x20000044

08000bd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_IncTick+0x1c>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a03      	ldr	r2, [pc, #12]	; (8000bf0 <HAL_IncTick+0x20>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	20000048 	.word	0x20000048
 8000bf0:	200000e4 	.word	0x200000e4

08000bf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf8:	4b02      	ldr	r3, [pc, #8]	; (8000c04 <HAL_GetTick+0x10>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr
 8000c04:	200000e4 	.word	0x200000e4

08000c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c10:	f7ff fff0 	bl	8000bf4 <HAL_GetTick>
 8000c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c20:	d005      	beq.n	8000c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_Delay+0x44>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c2e:	bf00      	nop
 8000c30:	f7ff ffe0 	bl	8000bf4 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8f7      	bhi.n	8000c30 <HAL_Delay+0x28>
  {
  }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000048 	.word	0x20000048

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c82:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	60d3      	str	r3, [r2, #12]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f7ff ff90 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	; (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff49 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff5e 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff90 	bl	8000d08 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5f 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffb0 	bl	8000d6c <SysTick_Config>
 8000e0c:	4603      	mov	r3, r0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b08b      	sub	sp, #44	; 0x2c
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	e169      	b.n	8001100 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	69fa      	ldr	r2, [r7, #28]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	f040 8158 	bne.w	80010fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	4a9a      	ldr	r2, [pc, #616]	; (80010b8 <HAL_GPIO_Init+0x2a0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d05e      	beq.n	8000f12 <HAL_GPIO_Init+0xfa>
 8000e54:	4a98      	ldr	r2, [pc, #608]	; (80010b8 <HAL_GPIO_Init+0x2a0>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d875      	bhi.n	8000f46 <HAL_GPIO_Init+0x12e>
 8000e5a:	4a98      	ldr	r2, [pc, #608]	; (80010bc <HAL_GPIO_Init+0x2a4>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d058      	beq.n	8000f12 <HAL_GPIO_Init+0xfa>
 8000e60:	4a96      	ldr	r2, [pc, #600]	; (80010bc <HAL_GPIO_Init+0x2a4>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d86f      	bhi.n	8000f46 <HAL_GPIO_Init+0x12e>
 8000e66:	4a96      	ldr	r2, [pc, #600]	; (80010c0 <HAL_GPIO_Init+0x2a8>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d052      	beq.n	8000f12 <HAL_GPIO_Init+0xfa>
 8000e6c:	4a94      	ldr	r2, [pc, #592]	; (80010c0 <HAL_GPIO_Init+0x2a8>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d869      	bhi.n	8000f46 <HAL_GPIO_Init+0x12e>
 8000e72:	4a94      	ldr	r2, [pc, #592]	; (80010c4 <HAL_GPIO_Init+0x2ac>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d04c      	beq.n	8000f12 <HAL_GPIO_Init+0xfa>
 8000e78:	4a92      	ldr	r2, [pc, #584]	; (80010c4 <HAL_GPIO_Init+0x2ac>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d863      	bhi.n	8000f46 <HAL_GPIO_Init+0x12e>
 8000e7e:	4a92      	ldr	r2, [pc, #584]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d046      	beq.n	8000f12 <HAL_GPIO_Init+0xfa>
 8000e84:	4a90      	ldr	r2, [pc, #576]	; (80010c8 <HAL_GPIO_Init+0x2b0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d85d      	bhi.n	8000f46 <HAL_GPIO_Init+0x12e>
 8000e8a:	2b12      	cmp	r3, #18
 8000e8c:	d82a      	bhi.n	8000ee4 <HAL_GPIO_Init+0xcc>
 8000e8e:	2b12      	cmp	r3, #18
 8000e90:	d859      	bhi.n	8000f46 <HAL_GPIO_Init+0x12e>
 8000e92:	a201      	add	r2, pc, #4	; (adr r2, 8000e98 <HAL_GPIO_Init+0x80>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000f13 	.word	0x08000f13
 8000e9c:	08000eed 	.word	0x08000eed
 8000ea0:	08000eff 	.word	0x08000eff
 8000ea4:	08000f41 	.word	0x08000f41
 8000ea8:	08000f47 	.word	0x08000f47
 8000eac:	08000f47 	.word	0x08000f47
 8000eb0:	08000f47 	.word	0x08000f47
 8000eb4:	08000f47 	.word	0x08000f47
 8000eb8:	08000f47 	.word	0x08000f47
 8000ebc:	08000f47 	.word	0x08000f47
 8000ec0:	08000f47 	.word	0x08000f47
 8000ec4:	08000f47 	.word	0x08000f47
 8000ec8:	08000f47 	.word	0x08000f47
 8000ecc:	08000f47 	.word	0x08000f47
 8000ed0:	08000f47 	.word	0x08000f47
 8000ed4:	08000f47 	.word	0x08000f47
 8000ed8:	08000f47 	.word	0x08000f47
 8000edc:	08000ef5 	.word	0x08000ef5
 8000ee0:	08000f09 	.word	0x08000f09
 8000ee4:	4a79      	ldr	r2, [pc, #484]	; (80010cc <HAL_GPIO_Init+0x2b4>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d013      	beq.n	8000f12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eea:	e02c      	b.n	8000f46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	623b      	str	r3, [r7, #32]
          break;
 8000ef2:	e029      	b.n	8000f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	623b      	str	r3, [r7, #32]
          break;
 8000efc:	e024      	b.n	8000f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	3308      	adds	r3, #8
 8000f04:	623b      	str	r3, [r7, #32]
          break;
 8000f06:	e01f      	b.n	8000f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	330c      	adds	r3, #12
 8000f0e:	623b      	str	r3, [r7, #32]
          break;
 8000f10:	e01a      	b.n	8000f48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d102      	bne.n	8000f20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	623b      	str	r3, [r7, #32]
          break;
 8000f1e:	e013      	b.n	8000f48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d105      	bne.n	8000f34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	611a      	str	r2, [r3, #16]
          break;
 8000f32:	e009      	b.n	8000f48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f34:	2308      	movs	r3, #8
 8000f36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69fa      	ldr	r2, [r7, #28]
 8000f3c:	615a      	str	r2, [r3, #20]
          break;
 8000f3e:	e003      	b.n	8000f48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
          break;
 8000f44:	e000      	b.n	8000f48 <HAL_GPIO_Init+0x130>
          break;
 8000f46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	2bff      	cmp	r3, #255	; 0xff
 8000f4c:	d801      	bhi.n	8000f52 <HAL_GPIO_Init+0x13a>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	e001      	b.n	8000f56 <HAL_GPIO_Init+0x13e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3304      	adds	r3, #4
 8000f56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2bff      	cmp	r3, #255	; 0xff
 8000f5c:	d802      	bhi.n	8000f64 <HAL_GPIO_Init+0x14c>
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	e002      	b.n	8000f6a <HAL_GPIO_Init+0x152>
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	3b08      	subs	r3, #8
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	210f      	movs	r1, #15
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	6a39      	ldr	r1, [r7, #32]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	431a      	orrs	r2, r3
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 80b1 	beq.w	80010fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f98:	4b4d      	ldr	r3, [pc, #308]	; (80010d0 <HAL_GPIO_Init+0x2b8>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a4c      	ldr	r2, [pc, #304]	; (80010d0 <HAL_GPIO_Init+0x2b8>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b4a      	ldr	r3, [pc, #296]	; (80010d0 <HAL_GPIO_Init+0x2b8>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fb0:	4a48      	ldr	r2, [pc, #288]	; (80010d4 <HAL_GPIO_Init+0x2bc>)
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a40      	ldr	r2, [pc, #256]	; (80010d8 <HAL_GPIO_Init+0x2c0>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d013      	beq.n	8001004 <HAL_GPIO_Init+0x1ec>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a3f      	ldr	r2, [pc, #252]	; (80010dc <HAL_GPIO_Init+0x2c4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d00d      	beq.n	8001000 <HAL_GPIO_Init+0x1e8>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a3e      	ldr	r2, [pc, #248]	; (80010e0 <HAL_GPIO_Init+0x2c8>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d007      	beq.n	8000ffc <HAL_GPIO_Init+0x1e4>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a3d      	ldr	r2, [pc, #244]	; (80010e4 <HAL_GPIO_Init+0x2cc>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d101      	bne.n	8000ff8 <HAL_GPIO_Init+0x1e0>
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e006      	b.n	8001006 <HAL_GPIO_Init+0x1ee>
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	e004      	b.n	8001006 <HAL_GPIO_Init+0x1ee>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	e002      	b.n	8001006 <HAL_GPIO_Init+0x1ee>
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <HAL_GPIO_Init+0x1ee>
 8001004:	2300      	movs	r3, #0
 8001006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001008:	f002 0203 	and.w	r2, r2, #3
 800100c:	0092      	lsls	r2, r2, #2
 800100e:	4093      	lsls	r3, r2
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001016:	492f      	ldr	r1, [pc, #188]	; (80010d4 <HAL_GPIO_Init+0x2bc>)
 8001018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	492c      	ldr	r1, [pc, #176]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	608b      	str	r3, [r1, #8]
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800103e:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	43db      	mvns	r3, r3
 8001046:	4928      	ldr	r1, [pc, #160]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 8001048:	4013      	ands	r3, r2
 800104a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d006      	beq.n	8001066 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	4922      	ldr	r1, [pc, #136]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	60cb      	str	r3, [r1, #12]
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	43db      	mvns	r3, r3
 800106e:	491e      	ldr	r1, [pc, #120]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 8001070:	4013      	ands	r3, r2
 8001072:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	4918      	ldr	r1, [pc, #96]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
 800108c:	e006      	b.n	800109c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	43db      	mvns	r3, r3
 8001096:	4914      	ldr	r1, [pc, #80]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 8001098:	4013      	ands	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d021      	beq.n	80010ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	490e      	ldr	r1, [pc, #56]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	600b      	str	r3, [r1, #0]
 80010b4:	e021      	b.n	80010fa <HAL_GPIO_Init+0x2e2>
 80010b6:	bf00      	nop
 80010b8:	10320000 	.word	0x10320000
 80010bc:	10310000 	.word	0x10310000
 80010c0:	10220000 	.word	0x10220000
 80010c4:	10210000 	.word	0x10210000
 80010c8:	10120000 	.word	0x10120000
 80010cc:	10110000 	.word	0x10110000
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000
 80010d8:	40010800 	.word	0x40010800
 80010dc:	40010c00 	.word	0x40010c00
 80010e0:	40011000 	.word	0x40011000
 80010e4:	40011400 	.word	0x40011400
 80010e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <HAL_GPIO_Init+0x304>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	4909      	ldr	r1, [pc, #36]	; (800111c <HAL_GPIO_Init+0x304>)
 80010f6:	4013      	ands	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	3301      	adds	r3, #1
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	fa22 f303 	lsr.w	r3, r2, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	f47f ae8e 	bne.w	8000e2c <HAL_GPIO_Init+0x14>
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	372c      	adds	r7, #44	; 0x2c
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr
 800111c:	40010400 	.word	0x40010400

08001120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	807b      	strh	r3, [r7, #2]
 800112c:	4613      	mov	r3, r2
 800112e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001130:	787b      	ldrb	r3, [r7, #1]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800113c:	e003      	b.n	8001146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	041a      	lsls	r2, r3, #16
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	611a      	str	r2, [r3, #16]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e272      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 8087 	beq.w	800127e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001170:	4b92      	ldr	r3, [pc, #584]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 030c 	and.w	r3, r3, #12
 8001178:	2b04      	cmp	r3, #4
 800117a:	d00c      	beq.n	8001196 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800117c:	4b8f      	ldr	r3, [pc, #572]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 030c 	and.w	r3, r3, #12
 8001184:	2b08      	cmp	r3, #8
 8001186:	d112      	bne.n	80011ae <HAL_RCC_OscConfig+0x5e>
 8001188:	4b8c      	ldr	r3, [pc, #560]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001194:	d10b      	bne.n	80011ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001196:	4b89      	ldr	r3, [pc, #548]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d06c      	beq.n	800127c <HAL_RCC_OscConfig+0x12c>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d168      	bne.n	800127c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e24c      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b6:	d106      	bne.n	80011c6 <HAL_RCC_OscConfig+0x76>
 80011b8:	4b80      	ldr	r3, [pc, #512]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a7f      	ldr	r2, [pc, #508]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 80011be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	e02e      	b.n	8001224 <HAL_RCC_OscConfig+0xd4>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x98>
 80011ce:	4b7b      	ldr	r3, [pc, #492]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a7a      	ldr	r2, [pc, #488]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 80011d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	4b78      	ldr	r3, [pc, #480]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a77      	ldr	r2, [pc, #476]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 80011e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e01d      	b.n	8001224 <HAL_RCC_OscConfig+0xd4>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f0:	d10c      	bne.n	800120c <HAL_RCC_OscConfig+0xbc>
 80011f2:	4b72      	ldr	r3, [pc, #456]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a71      	ldr	r2, [pc, #452]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	4b6f      	ldr	r3, [pc, #444]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a6e      	ldr	r2, [pc, #440]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 8001204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e00b      	b.n	8001224 <HAL_RCC_OscConfig+0xd4>
 800120c:	4b6b      	ldr	r3, [pc, #428]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a6a      	ldr	r2, [pc, #424]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 8001212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	4b68      	ldr	r3, [pc, #416]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a67      	ldr	r2, [pc, #412]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 800121e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001222:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d013      	beq.n	8001254 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fce2 	bl	8000bf4 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff fcde 	bl	8000bf4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e200      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	4b5d      	ldr	r3, [pc, #372]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0xe4>
 8001252:	e014      	b.n	800127e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fcce 	bl	8000bf4 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff fcca 	bl	8000bf4 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	; 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e1ec      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126e:	4b53      	ldr	r3, [pc, #332]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0x10c>
 800127a:	e000      	b.n	800127e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d063      	beq.n	8001352 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800128a:	4b4c      	ldr	r3, [pc, #304]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00b      	beq.n	80012ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001296:	4b49      	ldr	r3, [pc, #292]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 030c 	and.w	r3, r3, #12
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d11c      	bne.n	80012dc <HAL_RCC_OscConfig+0x18c>
 80012a2:	4b46      	ldr	r3, [pc, #280]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d116      	bne.n	80012dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ae:	4b43      	ldr	r3, [pc, #268]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d005      	beq.n	80012c6 <HAL_RCC_OscConfig+0x176>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d001      	beq.n	80012c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e1c0      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c6:	4b3d      	ldr	r3, [pc, #244]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4939      	ldr	r1, [pc, #228]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012da:	e03a      	b.n	8001352 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d020      	beq.n	8001326 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e4:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <HAL_RCC_OscConfig+0x270>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ea:	f7ff fc83 	bl	8000bf4 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f2:	f7ff fc7f 	bl	8000bf4 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e1a1      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001304:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001310:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	695b      	ldr	r3, [r3, #20]
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	4927      	ldr	r1, [pc, #156]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 8001320:	4313      	orrs	r3, r2
 8001322:	600b      	str	r3, [r1, #0]
 8001324:	e015      	b.n	8001352 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <HAL_RCC_OscConfig+0x270>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fc62 	bl	8000bf4 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001334:	f7ff fc5e 	bl	8000bf4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e180      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d03a      	beq.n	80013d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d019      	beq.n	800139a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_RCC_OscConfig+0x274>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136c:	f7ff fc42 	bl	8000bf4 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001374:	f7ff fc3e 	bl	8000bf4 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e160      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <HAL_RCC_OscConfig+0x26c>)
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f000 faa6 	bl	80018e4 <RCC_Delay>
 8001398:	e01c      	b.n	80013d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_RCC_OscConfig+0x274>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a0:	f7ff fc28 	bl	8000bf4 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a6:	e00f      	b.n	80013c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a8:	f7ff fc24 	bl	8000bf4 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d908      	bls.n	80013c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e146      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000
 80013c0:	42420000 	.word	0x42420000
 80013c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c8:	4b92      	ldr	r3, [pc, #584]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1e9      	bne.n	80013a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 80a6 	beq.w	800152e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e6:	4b8b      	ldr	r3, [pc, #556]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10d      	bne.n	800140e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013f2:	4b88      	ldr	r3, [pc, #544]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	4a87      	ldr	r2, [pc, #540]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fc:	61d3      	str	r3, [r2, #28]
 80013fe:	4b85      	ldr	r3, [pc, #532]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800140a:	2301      	movs	r3, #1
 800140c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140e:	4b82      	ldr	r3, [pc, #520]	; (8001618 <HAL_RCC_OscConfig+0x4c8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001416:	2b00      	cmp	r3, #0
 8001418:	d118      	bne.n	800144c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800141a:	4b7f      	ldr	r3, [pc, #508]	; (8001618 <HAL_RCC_OscConfig+0x4c8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a7e      	ldr	r2, [pc, #504]	; (8001618 <HAL_RCC_OscConfig+0x4c8>)
 8001420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001426:	f7ff fbe5 	bl	8000bf4 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142e:	f7ff fbe1 	bl	8000bf4 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b64      	cmp	r3, #100	; 0x64
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e103      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	4b75      	ldr	r3, [pc, #468]	; (8001618 <HAL_RCC_OscConfig+0x4c8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d106      	bne.n	8001462 <HAL_RCC_OscConfig+0x312>
 8001454:	4b6f      	ldr	r3, [pc, #444]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4a6e      	ldr	r2, [pc, #440]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	6213      	str	r3, [r2, #32]
 8001460:	e02d      	b.n	80014be <HAL_RCC_OscConfig+0x36e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10c      	bne.n	8001484 <HAL_RCC_OscConfig+0x334>
 800146a:	4b6a      	ldr	r3, [pc, #424]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	4a69      	ldr	r2, [pc, #420]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 8001470:	f023 0301 	bic.w	r3, r3, #1
 8001474:	6213      	str	r3, [r2, #32]
 8001476:	4b67      	ldr	r3, [pc, #412]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	4a66      	ldr	r2, [pc, #408]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 800147c:	f023 0304 	bic.w	r3, r3, #4
 8001480:	6213      	str	r3, [r2, #32]
 8001482:	e01c      	b.n	80014be <HAL_RCC_OscConfig+0x36e>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b05      	cmp	r3, #5
 800148a:	d10c      	bne.n	80014a6 <HAL_RCC_OscConfig+0x356>
 800148c:	4b61      	ldr	r3, [pc, #388]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	4a60      	ldr	r2, [pc, #384]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	6213      	str	r3, [r2, #32]
 8001498:	4b5e      	ldr	r3, [pc, #376]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4a5d      	ldr	r2, [pc, #372]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6213      	str	r3, [r2, #32]
 80014a4:	e00b      	b.n	80014be <HAL_RCC_OscConfig+0x36e>
 80014a6:	4b5b      	ldr	r3, [pc, #364]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	4a5a      	ldr	r2, [pc, #360]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	f023 0301 	bic.w	r3, r3, #1
 80014b0:	6213      	str	r3, [r2, #32]
 80014b2:	4b58      	ldr	r3, [pc, #352]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	4a57      	ldr	r2, [pc, #348]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	f023 0304 	bic.w	r3, r3, #4
 80014bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d015      	beq.n	80014f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fb95 	bl	8000bf4 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014cc:	e00a      	b.n	80014e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff fb91 	bl	8000bf4 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014dc:	4293      	cmp	r3, r2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e0b1      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e4:	4b4b      	ldr	r3, [pc, #300]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0ee      	beq.n	80014ce <HAL_RCC_OscConfig+0x37e>
 80014f0:	e014      	b.n	800151c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fb7f 	bl	8000bf4 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f8:	e00a      	b.n	8001510 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fa:	f7ff fb7b 	bl	8000bf4 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	f241 3288 	movw	r2, #5000	; 0x1388
 8001508:	4293      	cmp	r3, r2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e09b      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001510:	4b40      	ldr	r3, [pc, #256]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1ee      	bne.n	80014fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800151c:	7dfb      	ldrb	r3, [r7, #23]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d105      	bne.n	800152e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001522:	4b3c      	ldr	r3, [pc, #240]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a3b      	ldr	r2, [pc, #236]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800152c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 8087 	beq.w	8001646 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001538:	4b36      	ldr	r3, [pc, #216]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	2b08      	cmp	r3, #8
 8001542:	d061      	beq.n	8001608 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d146      	bne.n	80015da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800154c:	4b33      	ldr	r3, [pc, #204]	; (800161c <HAL_RCC_OscConfig+0x4cc>)
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff fb4f 	bl	8000bf4 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800155a:	f7ff fb4b 	bl	8000bf4 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e06d      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800156c:	4b29      	ldr	r3, [pc, #164]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f0      	bne.n	800155a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001580:	d108      	bne.n	8001594 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	4921      	ldr	r1, [pc, #132]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a19      	ldr	r1, [r3, #32]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	430b      	orrs	r3, r1
 80015a6:	491b      	ldr	r1, [pc, #108]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <HAL_RCC_OscConfig+0x4cc>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fb1f 	bl	8000bf4 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ba:	f7ff fb1b 	bl	8000bf4 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e03d      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x46a>
 80015d8:	e035      	b.n	8001646 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <HAL_RCC_OscConfig+0x4cc>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fb08 	bl	8000bf4 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff fb04 	bl	8000bf4 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e026      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x498>
 8001606:	e01e      	b.n	8001646 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d107      	bne.n	8001620 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e019      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>
 8001614:	40021000 	.word	0x40021000
 8001618:	40007000 	.word	0x40007000
 800161c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_RCC_OscConfig+0x500>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	429a      	cmp	r2, r3
 8001632:	d106      	bne.n	8001642 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800163e:	429a      	cmp	r2, r3
 8001640:	d001      	beq.n	8001646 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e000      	b.n	8001648 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000

08001654 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e0d0      	b.n	800180a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001668:	4b6a      	ldr	r3, [pc, #424]	; (8001814 <HAL_RCC_ClockConfig+0x1c0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d910      	bls.n	8001698 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001676:	4b67      	ldr	r3, [pc, #412]	; (8001814 <HAL_RCC_ClockConfig+0x1c0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 0207 	bic.w	r2, r3, #7
 800167e:	4965      	ldr	r1, [pc, #404]	; (8001814 <HAL_RCC_ClockConfig+0x1c0>)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	4b63      	ldr	r3, [pc, #396]	; (8001814 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0b8      	b.n	800180a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d020      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b0:	4b59      	ldr	r3, [pc, #356]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4a58      	ldr	r2, [pc, #352]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016c8:	4b53      	ldr	r3, [pc, #332]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	4a52      	ldr	r2, [pc, #328]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 80016ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d4:	4b50      	ldr	r3, [pc, #320]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	494d      	ldr	r1, [pc, #308]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d040      	beq.n	8001774 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d107      	bne.n	800170a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d115      	bne.n	8001732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e07f      	b.n	800180a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b02      	cmp	r3, #2
 8001710:	d107      	bne.n	8001722 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001712:	4b41      	ldr	r3, [pc, #260]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e073      	b.n	800180a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001722:	4b3d      	ldr	r3, [pc, #244]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e06b      	b.n	800180a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001732:	4b39      	ldr	r3, [pc, #228]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f023 0203 	bic.w	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4936      	ldr	r1, [pc, #216]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001744:	f7ff fa56 	bl	8000bf4 <HAL_GetTick>
 8001748:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174a:	e00a      	b.n	8001762 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800174c:	f7ff fa52 	bl	8000bf4 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	; 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e053      	b.n	800180a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001762:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 020c 	and.w	r2, r3, #12
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	429a      	cmp	r2, r3
 8001772:	d1eb      	bne.n	800174c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001774:	4b27      	ldr	r3, [pc, #156]	; (8001814 <HAL_RCC_ClockConfig+0x1c0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d210      	bcs.n	80017a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	4b24      	ldr	r3, [pc, #144]	; (8001814 <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 0207 	bic.w	r2, r3, #7
 800178a:	4922      	ldr	r1, [pc, #136]	; (8001814 <HAL_RCC_ClockConfig+0x1c0>)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e032      	b.n	800180a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d008      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4916      	ldr	r1, [pc, #88]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d009      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	490e      	ldr	r1, [pc, #56]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017e2:	f000 f821 	bl	8001828 <HAL_RCC_GetSysClockFreq>
 80017e6:	4602      	mov	r2, r0
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	490a      	ldr	r1, [pc, #40]	; (800181c <HAL_RCC_ClockConfig+0x1c8>)
 80017f4:	5ccb      	ldrb	r3, [r1, r3]
 80017f6:	fa22 f303 	lsr.w	r3, r2, r3
 80017fa:	4a09      	ldr	r2, [pc, #36]	; (8001820 <HAL_RCC_ClockConfig+0x1cc>)
 80017fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <HAL_RCC_ClockConfig+0x1d0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff f9b4 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40022000 	.word	0x40022000
 8001818:	40021000 	.word	0x40021000
 800181c:	080022a4 	.word	0x080022a4
 8001820:	20000040 	.word	0x20000040
 8001824:	20000044 	.word	0x20000044

08001828 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001842:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_RCC_GetSysClockFreq+0x94>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b04      	cmp	r3, #4
 8001850:	d002      	beq.n	8001858 <HAL_RCC_GetSysClockFreq+0x30>
 8001852:	2b08      	cmp	r3, #8
 8001854:	d003      	beq.n	800185e <HAL_RCC_GetSysClockFreq+0x36>
 8001856:	e027      	b.n	80018a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800185a:	613b      	str	r3, [r7, #16]
      break;
 800185c:	e027      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	0c9b      	lsrs	r3, r3, #18
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001868:	5cd3      	ldrb	r3, [r2, r3]
 800186a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d010      	beq.n	8001898 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_RCC_GetSysClockFreq+0x94>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	0c5b      	lsrs	r3, r3, #17
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001882:	5cd3      	ldrb	r3, [r2, r3]
 8001884:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800188a:	fb03 f202 	mul.w	r2, r3, r2
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	fbb2 f3f3 	udiv	r3, r2, r3
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	e004      	b.n	80018a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800189c:	fb02 f303 	mul.w	r3, r2, r3
 80018a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	613b      	str	r3, [r7, #16]
      break;
 80018a6:	e002      	b.n	80018ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80018aa:	613b      	str	r3, [r7, #16]
      break;
 80018ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ae:	693b      	ldr	r3, [r7, #16]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	371c      	adds	r7, #28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	007a1200 	.word	0x007a1200
 80018c4:	080022b4 	.word	0x080022b4
 80018c8:	080022c4 	.word	0x080022c4
 80018cc:	003d0900 	.word	0x003d0900

080018d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018d4:	4b02      	ldr	r3, [pc, #8]	; (80018e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	20000040 	.word	0x20000040

080018e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <RCC_Delay+0x34>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0a      	ldr	r2, [pc, #40]	; (800191c <RCC_Delay+0x38>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	0a5b      	lsrs	r3, r3, #9
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	fb02 f303 	mul.w	r3, r2, r3
 80018fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001900:	bf00      	nop
  }
  while (Delay --);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	1e5a      	subs	r2, r3, #1
 8001906:	60fa      	str	r2, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f9      	bne.n	8001900 <RCC_Delay+0x1c>
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	20000040 	.word	0x20000040
 800191c:	10624dd3 	.word	0x10624dd3

08001920 <__errno>:
 8001920:	4b01      	ldr	r3, [pc, #4]	; (8001928 <__errno+0x8>)
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	2000004c 	.word	0x2000004c

0800192c <__libc_init_array>:
 800192c:	b570      	push	{r4, r5, r6, lr}
 800192e:	2600      	movs	r6, #0
 8001930:	4d0c      	ldr	r5, [pc, #48]	; (8001964 <__libc_init_array+0x38>)
 8001932:	4c0d      	ldr	r4, [pc, #52]	; (8001968 <__libc_init_array+0x3c>)
 8001934:	1b64      	subs	r4, r4, r5
 8001936:	10a4      	asrs	r4, r4, #2
 8001938:	42a6      	cmp	r6, r4
 800193a:	d109      	bne.n	8001950 <__libc_init_array+0x24>
 800193c:	f000 fc9c 	bl	8002278 <_init>
 8001940:	2600      	movs	r6, #0
 8001942:	4d0a      	ldr	r5, [pc, #40]	; (800196c <__libc_init_array+0x40>)
 8001944:	4c0a      	ldr	r4, [pc, #40]	; (8001970 <__libc_init_array+0x44>)
 8001946:	1b64      	subs	r4, r4, r5
 8001948:	10a4      	asrs	r4, r4, #2
 800194a:	42a6      	cmp	r6, r4
 800194c:	d105      	bne.n	800195a <__libc_init_array+0x2e>
 800194e:	bd70      	pop	{r4, r5, r6, pc}
 8001950:	f855 3b04 	ldr.w	r3, [r5], #4
 8001954:	4798      	blx	r3
 8001956:	3601      	adds	r6, #1
 8001958:	e7ee      	b.n	8001938 <__libc_init_array+0xc>
 800195a:	f855 3b04 	ldr.w	r3, [r5], #4
 800195e:	4798      	blx	r3
 8001960:	3601      	adds	r6, #1
 8001962:	e7f2      	b.n	800194a <__libc_init_array+0x1e>
 8001964:	080022fc 	.word	0x080022fc
 8001968:	080022fc 	.word	0x080022fc
 800196c:	080022fc 	.word	0x080022fc
 8001970:	08002300 	.word	0x08002300

08001974 <memset>:
 8001974:	4603      	mov	r3, r0
 8001976:	4402      	add	r2, r0
 8001978:	4293      	cmp	r3, r2
 800197a:	d100      	bne.n	800197e <memset+0xa>
 800197c:	4770      	bx	lr
 800197e:	f803 1b01 	strb.w	r1, [r3], #1
 8001982:	e7f9      	b.n	8001978 <memset+0x4>

08001984 <siprintf>:
 8001984:	b40e      	push	{r1, r2, r3}
 8001986:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800198a:	b500      	push	{lr}
 800198c:	b09c      	sub	sp, #112	; 0x70
 800198e:	ab1d      	add	r3, sp, #116	; 0x74
 8001990:	9002      	str	r0, [sp, #8]
 8001992:	9006      	str	r0, [sp, #24]
 8001994:	9107      	str	r1, [sp, #28]
 8001996:	9104      	str	r1, [sp, #16]
 8001998:	4808      	ldr	r0, [pc, #32]	; (80019bc <siprintf+0x38>)
 800199a:	4909      	ldr	r1, [pc, #36]	; (80019c0 <siprintf+0x3c>)
 800199c:	f853 2b04 	ldr.w	r2, [r3], #4
 80019a0:	9105      	str	r1, [sp, #20]
 80019a2:	6800      	ldr	r0, [r0, #0]
 80019a4:	a902      	add	r1, sp, #8
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	f000 f868 	bl	8001a7c <_svfiprintf_r>
 80019ac:	2200      	movs	r2, #0
 80019ae:	9b02      	ldr	r3, [sp, #8]
 80019b0:	701a      	strb	r2, [r3, #0]
 80019b2:	b01c      	add	sp, #112	; 0x70
 80019b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80019b8:	b003      	add	sp, #12
 80019ba:	4770      	bx	lr
 80019bc:	2000004c 	.word	0x2000004c
 80019c0:	ffff0208 	.word	0xffff0208

080019c4 <__ssputs_r>:
 80019c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019c8:	688e      	ldr	r6, [r1, #8]
 80019ca:	4682      	mov	sl, r0
 80019cc:	429e      	cmp	r6, r3
 80019ce:	460c      	mov	r4, r1
 80019d0:	4690      	mov	r8, r2
 80019d2:	461f      	mov	r7, r3
 80019d4:	d838      	bhi.n	8001a48 <__ssputs_r+0x84>
 80019d6:	898a      	ldrh	r2, [r1, #12]
 80019d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80019dc:	d032      	beq.n	8001a44 <__ssputs_r+0x80>
 80019de:	6825      	ldr	r5, [r4, #0]
 80019e0:	6909      	ldr	r1, [r1, #16]
 80019e2:	3301      	adds	r3, #1
 80019e4:	eba5 0901 	sub.w	r9, r5, r1
 80019e8:	6965      	ldr	r5, [r4, #20]
 80019ea:	444b      	add	r3, r9
 80019ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80019f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80019f4:	106d      	asrs	r5, r5, #1
 80019f6:	429d      	cmp	r5, r3
 80019f8:	bf38      	it	cc
 80019fa:	461d      	movcc	r5, r3
 80019fc:	0553      	lsls	r3, r2, #21
 80019fe:	d531      	bpl.n	8001a64 <__ssputs_r+0xa0>
 8001a00:	4629      	mov	r1, r5
 8001a02:	f000 fb6f 	bl	80020e4 <_malloc_r>
 8001a06:	4606      	mov	r6, r0
 8001a08:	b950      	cbnz	r0, 8001a20 <__ssputs_r+0x5c>
 8001a0a:	230c      	movs	r3, #12
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f8ca 3000 	str.w	r3, [sl]
 8001a14:	89a3      	ldrh	r3, [r4, #12]
 8001a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a1a:	81a3      	strh	r3, [r4, #12]
 8001a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a20:	464a      	mov	r2, r9
 8001a22:	6921      	ldr	r1, [r4, #16]
 8001a24:	f000 face 	bl	8001fc4 <memcpy>
 8001a28:	89a3      	ldrh	r3, [r4, #12]
 8001a2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a32:	81a3      	strh	r3, [r4, #12]
 8001a34:	6126      	str	r6, [r4, #16]
 8001a36:	444e      	add	r6, r9
 8001a38:	6026      	str	r6, [r4, #0]
 8001a3a:	463e      	mov	r6, r7
 8001a3c:	6165      	str	r5, [r4, #20]
 8001a3e:	eba5 0509 	sub.w	r5, r5, r9
 8001a42:	60a5      	str	r5, [r4, #8]
 8001a44:	42be      	cmp	r6, r7
 8001a46:	d900      	bls.n	8001a4a <__ssputs_r+0x86>
 8001a48:	463e      	mov	r6, r7
 8001a4a:	4632      	mov	r2, r6
 8001a4c:	4641      	mov	r1, r8
 8001a4e:	6820      	ldr	r0, [r4, #0]
 8001a50:	f000 fac6 	bl	8001fe0 <memmove>
 8001a54:	68a3      	ldr	r3, [r4, #8]
 8001a56:	2000      	movs	r0, #0
 8001a58:	1b9b      	subs	r3, r3, r6
 8001a5a:	60a3      	str	r3, [r4, #8]
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	4433      	add	r3, r6
 8001a60:	6023      	str	r3, [r4, #0]
 8001a62:	e7db      	b.n	8001a1c <__ssputs_r+0x58>
 8001a64:	462a      	mov	r2, r5
 8001a66:	f000 fbb1 	bl	80021cc <_realloc_r>
 8001a6a:	4606      	mov	r6, r0
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	d1e1      	bne.n	8001a34 <__ssputs_r+0x70>
 8001a70:	4650      	mov	r0, sl
 8001a72:	6921      	ldr	r1, [r4, #16]
 8001a74:	f000 face 	bl	8002014 <_free_r>
 8001a78:	e7c7      	b.n	8001a0a <__ssputs_r+0x46>
	...

08001a7c <_svfiprintf_r>:
 8001a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a80:	4698      	mov	r8, r3
 8001a82:	898b      	ldrh	r3, [r1, #12]
 8001a84:	4607      	mov	r7, r0
 8001a86:	061b      	lsls	r3, r3, #24
 8001a88:	460d      	mov	r5, r1
 8001a8a:	4614      	mov	r4, r2
 8001a8c:	b09d      	sub	sp, #116	; 0x74
 8001a8e:	d50e      	bpl.n	8001aae <_svfiprintf_r+0x32>
 8001a90:	690b      	ldr	r3, [r1, #16]
 8001a92:	b963      	cbnz	r3, 8001aae <_svfiprintf_r+0x32>
 8001a94:	2140      	movs	r1, #64	; 0x40
 8001a96:	f000 fb25 	bl	80020e4 <_malloc_r>
 8001a9a:	6028      	str	r0, [r5, #0]
 8001a9c:	6128      	str	r0, [r5, #16]
 8001a9e:	b920      	cbnz	r0, 8001aaa <_svfiprintf_r+0x2e>
 8001aa0:	230c      	movs	r3, #12
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	e0d1      	b.n	8001c4e <_svfiprintf_r+0x1d2>
 8001aaa:	2340      	movs	r3, #64	; 0x40
 8001aac:	616b      	str	r3, [r5, #20]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ab8:	2330      	movs	r3, #48	; 0x30
 8001aba:	f04f 0901 	mov.w	r9, #1
 8001abe:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ac2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001c68 <_svfiprintf_r+0x1ec>
 8001ac6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001aca:	4623      	mov	r3, r4
 8001acc:	469a      	mov	sl, r3
 8001ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ad2:	b10a      	cbz	r2, 8001ad8 <_svfiprintf_r+0x5c>
 8001ad4:	2a25      	cmp	r2, #37	; 0x25
 8001ad6:	d1f9      	bne.n	8001acc <_svfiprintf_r+0x50>
 8001ad8:	ebba 0b04 	subs.w	fp, sl, r4
 8001adc:	d00b      	beq.n	8001af6 <_svfiprintf_r+0x7a>
 8001ade:	465b      	mov	r3, fp
 8001ae0:	4622      	mov	r2, r4
 8001ae2:	4629      	mov	r1, r5
 8001ae4:	4638      	mov	r0, r7
 8001ae6:	f7ff ff6d 	bl	80019c4 <__ssputs_r>
 8001aea:	3001      	adds	r0, #1
 8001aec:	f000 80aa 	beq.w	8001c44 <_svfiprintf_r+0x1c8>
 8001af0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001af2:	445a      	add	r2, fp
 8001af4:	9209      	str	r2, [sp, #36]	; 0x24
 8001af6:	f89a 3000 	ldrb.w	r3, [sl]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80a2 	beq.w	8001c44 <_svfiprintf_r+0x1c8>
 8001b00:	2300      	movs	r3, #0
 8001b02:	f04f 32ff 	mov.w	r2, #4294967295
 8001b06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b0a:	f10a 0a01 	add.w	sl, sl, #1
 8001b0e:	9304      	str	r3, [sp, #16]
 8001b10:	9307      	str	r3, [sp, #28]
 8001b12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001b16:	931a      	str	r3, [sp, #104]	; 0x68
 8001b18:	4654      	mov	r4, sl
 8001b1a:	2205      	movs	r2, #5
 8001b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b20:	4851      	ldr	r0, [pc, #324]	; (8001c68 <_svfiprintf_r+0x1ec>)
 8001b22:	f000 fa41 	bl	8001fa8 <memchr>
 8001b26:	9a04      	ldr	r2, [sp, #16]
 8001b28:	b9d8      	cbnz	r0, 8001b62 <_svfiprintf_r+0xe6>
 8001b2a:	06d0      	lsls	r0, r2, #27
 8001b2c:	bf44      	itt	mi
 8001b2e:	2320      	movmi	r3, #32
 8001b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b34:	0711      	lsls	r1, r2, #28
 8001b36:	bf44      	itt	mi
 8001b38:	232b      	movmi	r3, #43	; 0x2b
 8001b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8001b42:	2b2a      	cmp	r3, #42	; 0x2a
 8001b44:	d015      	beq.n	8001b72 <_svfiprintf_r+0xf6>
 8001b46:	4654      	mov	r4, sl
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f04f 0c0a 	mov.w	ip, #10
 8001b4e:	9a07      	ldr	r2, [sp, #28]
 8001b50:	4621      	mov	r1, r4
 8001b52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b56:	3b30      	subs	r3, #48	; 0x30
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	d94e      	bls.n	8001bfa <_svfiprintf_r+0x17e>
 8001b5c:	b1b0      	cbz	r0, 8001b8c <_svfiprintf_r+0x110>
 8001b5e:	9207      	str	r2, [sp, #28]
 8001b60:	e014      	b.n	8001b8c <_svfiprintf_r+0x110>
 8001b62:	eba0 0308 	sub.w	r3, r0, r8
 8001b66:	fa09 f303 	lsl.w	r3, r9, r3
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	46a2      	mov	sl, r4
 8001b6e:	9304      	str	r3, [sp, #16]
 8001b70:	e7d2      	b.n	8001b18 <_svfiprintf_r+0x9c>
 8001b72:	9b03      	ldr	r3, [sp, #12]
 8001b74:	1d19      	adds	r1, r3, #4
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	9103      	str	r1, [sp, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bfbb      	ittet	lt
 8001b7e:	425b      	neglt	r3, r3
 8001b80:	f042 0202 	orrlt.w	r2, r2, #2
 8001b84:	9307      	strge	r3, [sp, #28]
 8001b86:	9307      	strlt	r3, [sp, #28]
 8001b88:	bfb8      	it	lt
 8001b8a:	9204      	strlt	r2, [sp, #16]
 8001b8c:	7823      	ldrb	r3, [r4, #0]
 8001b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8001b90:	d10c      	bne.n	8001bac <_svfiprintf_r+0x130>
 8001b92:	7863      	ldrb	r3, [r4, #1]
 8001b94:	2b2a      	cmp	r3, #42	; 0x2a
 8001b96:	d135      	bne.n	8001c04 <_svfiprintf_r+0x188>
 8001b98:	9b03      	ldr	r3, [sp, #12]
 8001b9a:	3402      	adds	r4, #2
 8001b9c:	1d1a      	adds	r2, r3, #4
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	9203      	str	r2, [sp, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bfb8      	it	lt
 8001ba6:	f04f 33ff 	movlt.w	r3, #4294967295
 8001baa:	9305      	str	r3, [sp, #20]
 8001bac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001c6c <_svfiprintf_r+0x1f0>
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	4650      	mov	r0, sl
 8001bb4:	7821      	ldrb	r1, [r4, #0]
 8001bb6:	f000 f9f7 	bl	8001fa8 <memchr>
 8001bba:	b140      	cbz	r0, 8001bce <_svfiprintf_r+0x152>
 8001bbc:	2340      	movs	r3, #64	; 0x40
 8001bbe:	eba0 000a 	sub.w	r0, r0, sl
 8001bc2:	fa03 f000 	lsl.w	r0, r3, r0
 8001bc6:	9b04      	ldr	r3, [sp, #16]
 8001bc8:	3401      	adds	r4, #1
 8001bca:	4303      	orrs	r3, r0
 8001bcc:	9304      	str	r3, [sp, #16]
 8001bce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bd2:	2206      	movs	r2, #6
 8001bd4:	4826      	ldr	r0, [pc, #152]	; (8001c70 <_svfiprintf_r+0x1f4>)
 8001bd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001bda:	f000 f9e5 	bl	8001fa8 <memchr>
 8001bde:	2800      	cmp	r0, #0
 8001be0:	d038      	beq.n	8001c54 <_svfiprintf_r+0x1d8>
 8001be2:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <_svfiprintf_r+0x1f8>)
 8001be4:	bb1b      	cbnz	r3, 8001c2e <_svfiprintf_r+0x1b2>
 8001be6:	9b03      	ldr	r3, [sp, #12]
 8001be8:	3307      	adds	r3, #7
 8001bea:	f023 0307 	bic.w	r3, r3, #7
 8001bee:	3308      	adds	r3, #8
 8001bf0:	9303      	str	r3, [sp, #12]
 8001bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bf4:	4433      	add	r3, r6
 8001bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8001bf8:	e767      	b.n	8001aca <_svfiprintf_r+0x4e>
 8001bfa:	460c      	mov	r4, r1
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c02:	e7a5      	b.n	8001b50 <_svfiprintf_r+0xd4>
 8001c04:	2300      	movs	r3, #0
 8001c06:	f04f 0c0a 	mov.w	ip, #10
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	3401      	adds	r4, #1
 8001c0e:	9305      	str	r3, [sp, #20]
 8001c10:	4620      	mov	r0, r4
 8001c12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c16:	3a30      	subs	r2, #48	; 0x30
 8001c18:	2a09      	cmp	r2, #9
 8001c1a:	d903      	bls.n	8001c24 <_svfiprintf_r+0x1a8>
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0c5      	beq.n	8001bac <_svfiprintf_r+0x130>
 8001c20:	9105      	str	r1, [sp, #20]
 8001c22:	e7c3      	b.n	8001bac <_svfiprintf_r+0x130>
 8001c24:	4604      	mov	r4, r0
 8001c26:	2301      	movs	r3, #1
 8001c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c2c:	e7f0      	b.n	8001c10 <_svfiprintf_r+0x194>
 8001c2e:	ab03      	add	r3, sp, #12
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	462a      	mov	r2, r5
 8001c34:	4638      	mov	r0, r7
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <_svfiprintf_r+0x1fc>)
 8001c38:	a904      	add	r1, sp, #16
 8001c3a:	f3af 8000 	nop.w
 8001c3e:	1c42      	adds	r2, r0, #1
 8001c40:	4606      	mov	r6, r0
 8001c42:	d1d6      	bne.n	8001bf2 <_svfiprintf_r+0x176>
 8001c44:	89ab      	ldrh	r3, [r5, #12]
 8001c46:	065b      	lsls	r3, r3, #25
 8001c48:	f53f af2c 	bmi.w	8001aa4 <_svfiprintf_r+0x28>
 8001c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001c4e:	b01d      	add	sp, #116	; 0x74
 8001c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c54:	ab03      	add	r3, sp, #12
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	462a      	mov	r2, r5
 8001c5a:	4638      	mov	r0, r7
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <_svfiprintf_r+0x1fc>)
 8001c5e:	a904      	add	r1, sp, #16
 8001c60:	f000 f87c 	bl	8001d5c <_printf_i>
 8001c64:	e7eb      	b.n	8001c3e <_svfiprintf_r+0x1c2>
 8001c66:	bf00      	nop
 8001c68:	080022c6 	.word	0x080022c6
 8001c6c:	080022cc 	.word	0x080022cc
 8001c70:	080022d0 	.word	0x080022d0
 8001c74:	00000000 	.word	0x00000000
 8001c78:	080019c5 	.word	0x080019c5

08001c7c <_printf_common>:
 8001c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c80:	4616      	mov	r6, r2
 8001c82:	4699      	mov	r9, r3
 8001c84:	688a      	ldr	r2, [r1, #8]
 8001c86:	690b      	ldr	r3, [r1, #16]
 8001c88:	4607      	mov	r7, r0
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	bfb8      	it	lt
 8001c8e:	4613      	movlt	r3, r2
 8001c90:	6033      	str	r3, [r6, #0]
 8001c92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001c96:	460c      	mov	r4, r1
 8001c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001c9c:	b10a      	cbz	r2, 8001ca2 <_printf_common+0x26>
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	6033      	str	r3, [r6, #0]
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	0699      	lsls	r1, r3, #26
 8001ca6:	bf42      	ittt	mi
 8001ca8:	6833      	ldrmi	r3, [r6, #0]
 8001caa:	3302      	addmi	r3, #2
 8001cac:	6033      	strmi	r3, [r6, #0]
 8001cae:	6825      	ldr	r5, [r4, #0]
 8001cb0:	f015 0506 	ands.w	r5, r5, #6
 8001cb4:	d106      	bne.n	8001cc4 <_printf_common+0x48>
 8001cb6:	f104 0a19 	add.w	sl, r4, #25
 8001cba:	68e3      	ldr	r3, [r4, #12]
 8001cbc:	6832      	ldr	r2, [r6, #0]
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	42ab      	cmp	r3, r5
 8001cc2:	dc28      	bgt.n	8001d16 <_printf_common+0x9a>
 8001cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001cc8:	1e13      	subs	r3, r2, #0
 8001cca:	6822      	ldr	r2, [r4, #0]
 8001ccc:	bf18      	it	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	0692      	lsls	r2, r2, #26
 8001cd2:	d42d      	bmi.n	8001d30 <_printf_common+0xb4>
 8001cd4:	4649      	mov	r1, r9
 8001cd6:	4638      	mov	r0, r7
 8001cd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001cdc:	47c0      	blx	r8
 8001cde:	3001      	adds	r0, #1
 8001ce0:	d020      	beq.n	8001d24 <_printf_common+0xa8>
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	68e5      	ldr	r5, [r4, #12]
 8001ce6:	f003 0306 	and.w	r3, r3, #6
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	bf18      	it	ne
 8001cee:	2500      	movne	r5, #0
 8001cf0:	6832      	ldr	r2, [r6, #0]
 8001cf2:	f04f 0600 	mov.w	r6, #0
 8001cf6:	68a3      	ldr	r3, [r4, #8]
 8001cf8:	bf08      	it	eq
 8001cfa:	1aad      	subeq	r5, r5, r2
 8001cfc:	6922      	ldr	r2, [r4, #16]
 8001cfe:	bf08      	it	eq
 8001d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d04:	4293      	cmp	r3, r2
 8001d06:	bfc4      	itt	gt
 8001d08:	1a9b      	subgt	r3, r3, r2
 8001d0a:	18ed      	addgt	r5, r5, r3
 8001d0c:	341a      	adds	r4, #26
 8001d0e:	42b5      	cmp	r5, r6
 8001d10:	d11a      	bne.n	8001d48 <_printf_common+0xcc>
 8001d12:	2000      	movs	r0, #0
 8001d14:	e008      	b.n	8001d28 <_printf_common+0xac>
 8001d16:	2301      	movs	r3, #1
 8001d18:	4652      	mov	r2, sl
 8001d1a:	4649      	mov	r1, r9
 8001d1c:	4638      	mov	r0, r7
 8001d1e:	47c0      	blx	r8
 8001d20:	3001      	adds	r0, #1
 8001d22:	d103      	bne.n	8001d2c <_printf_common+0xb0>
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d2c:	3501      	adds	r5, #1
 8001d2e:	e7c4      	b.n	8001cba <_printf_common+0x3e>
 8001d30:	2030      	movs	r0, #48	; 0x30
 8001d32:	18e1      	adds	r1, r4, r3
 8001d34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001d3e:	4422      	add	r2, r4
 8001d40:	3302      	adds	r3, #2
 8001d42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001d46:	e7c5      	b.n	8001cd4 <_printf_common+0x58>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	4622      	mov	r2, r4
 8001d4c:	4649      	mov	r1, r9
 8001d4e:	4638      	mov	r0, r7
 8001d50:	47c0      	blx	r8
 8001d52:	3001      	adds	r0, #1
 8001d54:	d0e6      	beq.n	8001d24 <_printf_common+0xa8>
 8001d56:	3601      	adds	r6, #1
 8001d58:	e7d9      	b.n	8001d0e <_printf_common+0x92>
	...

08001d5c <_printf_i>:
 8001d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d60:	7e0f      	ldrb	r7, [r1, #24]
 8001d62:	4691      	mov	r9, r2
 8001d64:	2f78      	cmp	r7, #120	; 0x78
 8001d66:	4680      	mov	r8, r0
 8001d68:	460c      	mov	r4, r1
 8001d6a:	469a      	mov	sl, r3
 8001d6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001d6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001d72:	d807      	bhi.n	8001d84 <_printf_i+0x28>
 8001d74:	2f62      	cmp	r7, #98	; 0x62
 8001d76:	d80a      	bhi.n	8001d8e <_printf_i+0x32>
 8001d78:	2f00      	cmp	r7, #0
 8001d7a:	f000 80d9 	beq.w	8001f30 <_printf_i+0x1d4>
 8001d7e:	2f58      	cmp	r7, #88	; 0x58
 8001d80:	f000 80a4 	beq.w	8001ecc <_printf_i+0x170>
 8001d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001d8c:	e03a      	b.n	8001e04 <_printf_i+0xa8>
 8001d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001d92:	2b15      	cmp	r3, #21
 8001d94:	d8f6      	bhi.n	8001d84 <_printf_i+0x28>
 8001d96:	a101      	add	r1, pc, #4	; (adr r1, 8001d9c <_printf_i+0x40>)
 8001d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d9c:	08001df5 	.word	0x08001df5
 8001da0:	08001e09 	.word	0x08001e09
 8001da4:	08001d85 	.word	0x08001d85
 8001da8:	08001d85 	.word	0x08001d85
 8001dac:	08001d85 	.word	0x08001d85
 8001db0:	08001d85 	.word	0x08001d85
 8001db4:	08001e09 	.word	0x08001e09
 8001db8:	08001d85 	.word	0x08001d85
 8001dbc:	08001d85 	.word	0x08001d85
 8001dc0:	08001d85 	.word	0x08001d85
 8001dc4:	08001d85 	.word	0x08001d85
 8001dc8:	08001f17 	.word	0x08001f17
 8001dcc:	08001e39 	.word	0x08001e39
 8001dd0:	08001ef9 	.word	0x08001ef9
 8001dd4:	08001d85 	.word	0x08001d85
 8001dd8:	08001d85 	.word	0x08001d85
 8001ddc:	08001f39 	.word	0x08001f39
 8001de0:	08001d85 	.word	0x08001d85
 8001de4:	08001e39 	.word	0x08001e39
 8001de8:	08001d85 	.word	0x08001d85
 8001dec:	08001d85 	.word	0x08001d85
 8001df0:	08001f01 	.word	0x08001f01
 8001df4:	682b      	ldr	r3, [r5, #0]
 8001df6:	1d1a      	adds	r2, r3, #4
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	602a      	str	r2, [r5, #0]
 8001dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0a4      	b.n	8001f52 <_printf_i+0x1f6>
 8001e08:	6820      	ldr	r0, [r4, #0]
 8001e0a:	6829      	ldr	r1, [r5, #0]
 8001e0c:	0606      	lsls	r6, r0, #24
 8001e0e:	f101 0304 	add.w	r3, r1, #4
 8001e12:	d50a      	bpl.n	8001e2a <_printf_i+0xce>
 8001e14:	680e      	ldr	r6, [r1, #0]
 8001e16:	602b      	str	r3, [r5, #0]
 8001e18:	2e00      	cmp	r6, #0
 8001e1a:	da03      	bge.n	8001e24 <_printf_i+0xc8>
 8001e1c:	232d      	movs	r3, #45	; 0x2d
 8001e1e:	4276      	negs	r6, r6
 8001e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e24:	230a      	movs	r3, #10
 8001e26:	485e      	ldr	r0, [pc, #376]	; (8001fa0 <_printf_i+0x244>)
 8001e28:	e019      	b.n	8001e5e <_printf_i+0x102>
 8001e2a:	680e      	ldr	r6, [r1, #0]
 8001e2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e30:	602b      	str	r3, [r5, #0]
 8001e32:	bf18      	it	ne
 8001e34:	b236      	sxthne	r6, r6
 8001e36:	e7ef      	b.n	8001e18 <_printf_i+0xbc>
 8001e38:	682b      	ldr	r3, [r5, #0]
 8001e3a:	6820      	ldr	r0, [r4, #0]
 8001e3c:	1d19      	adds	r1, r3, #4
 8001e3e:	6029      	str	r1, [r5, #0]
 8001e40:	0601      	lsls	r1, r0, #24
 8001e42:	d501      	bpl.n	8001e48 <_printf_i+0xec>
 8001e44:	681e      	ldr	r6, [r3, #0]
 8001e46:	e002      	b.n	8001e4e <_printf_i+0xf2>
 8001e48:	0646      	lsls	r6, r0, #25
 8001e4a:	d5fb      	bpl.n	8001e44 <_printf_i+0xe8>
 8001e4c:	881e      	ldrh	r6, [r3, #0]
 8001e4e:	2f6f      	cmp	r7, #111	; 0x6f
 8001e50:	bf0c      	ite	eq
 8001e52:	2308      	moveq	r3, #8
 8001e54:	230a      	movne	r3, #10
 8001e56:	4852      	ldr	r0, [pc, #328]	; (8001fa0 <_printf_i+0x244>)
 8001e58:	2100      	movs	r1, #0
 8001e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001e5e:	6865      	ldr	r5, [r4, #4]
 8001e60:	2d00      	cmp	r5, #0
 8001e62:	bfa8      	it	ge
 8001e64:	6821      	ldrge	r1, [r4, #0]
 8001e66:	60a5      	str	r5, [r4, #8]
 8001e68:	bfa4      	itt	ge
 8001e6a:	f021 0104 	bicge.w	r1, r1, #4
 8001e6e:	6021      	strge	r1, [r4, #0]
 8001e70:	b90e      	cbnz	r6, 8001e76 <_printf_i+0x11a>
 8001e72:	2d00      	cmp	r5, #0
 8001e74:	d04d      	beq.n	8001f12 <_printf_i+0x1b6>
 8001e76:	4615      	mov	r5, r2
 8001e78:	fbb6 f1f3 	udiv	r1, r6, r3
 8001e7c:	fb03 6711 	mls	r7, r3, r1, r6
 8001e80:	5dc7      	ldrb	r7, [r0, r7]
 8001e82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001e86:	4637      	mov	r7, r6
 8001e88:	42bb      	cmp	r3, r7
 8001e8a:	460e      	mov	r6, r1
 8001e8c:	d9f4      	bls.n	8001e78 <_printf_i+0x11c>
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d10b      	bne.n	8001eaa <_printf_i+0x14e>
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	07de      	lsls	r6, r3, #31
 8001e96:	d508      	bpl.n	8001eaa <_printf_i+0x14e>
 8001e98:	6923      	ldr	r3, [r4, #16]
 8001e9a:	6861      	ldr	r1, [r4, #4]
 8001e9c:	4299      	cmp	r1, r3
 8001e9e:	bfde      	ittt	le
 8001ea0:	2330      	movle	r3, #48	; 0x30
 8001ea2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ea6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001eaa:	1b52      	subs	r2, r2, r5
 8001eac:	6122      	str	r2, [r4, #16]
 8001eae:	464b      	mov	r3, r9
 8001eb0:	4621      	mov	r1, r4
 8001eb2:	4640      	mov	r0, r8
 8001eb4:	f8cd a000 	str.w	sl, [sp]
 8001eb8:	aa03      	add	r2, sp, #12
 8001eba:	f7ff fedf 	bl	8001c7c <_printf_common>
 8001ebe:	3001      	adds	r0, #1
 8001ec0:	d14c      	bne.n	8001f5c <_printf_i+0x200>
 8001ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec6:	b004      	add	sp, #16
 8001ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ecc:	4834      	ldr	r0, [pc, #208]	; (8001fa0 <_printf_i+0x244>)
 8001ece:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001ed2:	6829      	ldr	r1, [r5, #0]
 8001ed4:	6823      	ldr	r3, [r4, #0]
 8001ed6:	f851 6b04 	ldr.w	r6, [r1], #4
 8001eda:	6029      	str	r1, [r5, #0]
 8001edc:	061d      	lsls	r5, r3, #24
 8001ede:	d514      	bpl.n	8001f0a <_printf_i+0x1ae>
 8001ee0:	07df      	lsls	r7, r3, #31
 8001ee2:	bf44      	itt	mi
 8001ee4:	f043 0320 	orrmi.w	r3, r3, #32
 8001ee8:	6023      	strmi	r3, [r4, #0]
 8001eea:	b91e      	cbnz	r6, 8001ef4 <_printf_i+0x198>
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	f023 0320 	bic.w	r3, r3, #32
 8001ef2:	6023      	str	r3, [r4, #0]
 8001ef4:	2310      	movs	r3, #16
 8001ef6:	e7af      	b.n	8001e58 <_printf_i+0xfc>
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	f043 0320 	orr.w	r3, r3, #32
 8001efe:	6023      	str	r3, [r4, #0]
 8001f00:	2378      	movs	r3, #120	; 0x78
 8001f02:	4828      	ldr	r0, [pc, #160]	; (8001fa4 <_printf_i+0x248>)
 8001f04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001f08:	e7e3      	b.n	8001ed2 <_printf_i+0x176>
 8001f0a:	0659      	lsls	r1, r3, #25
 8001f0c:	bf48      	it	mi
 8001f0e:	b2b6      	uxthmi	r6, r6
 8001f10:	e7e6      	b.n	8001ee0 <_printf_i+0x184>
 8001f12:	4615      	mov	r5, r2
 8001f14:	e7bb      	b.n	8001e8e <_printf_i+0x132>
 8001f16:	682b      	ldr	r3, [r5, #0]
 8001f18:	6826      	ldr	r6, [r4, #0]
 8001f1a:	1d18      	adds	r0, r3, #4
 8001f1c:	6961      	ldr	r1, [r4, #20]
 8001f1e:	6028      	str	r0, [r5, #0]
 8001f20:	0635      	lsls	r5, r6, #24
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	d501      	bpl.n	8001f2a <_printf_i+0x1ce>
 8001f26:	6019      	str	r1, [r3, #0]
 8001f28:	e002      	b.n	8001f30 <_printf_i+0x1d4>
 8001f2a:	0670      	lsls	r0, r6, #25
 8001f2c:	d5fb      	bpl.n	8001f26 <_printf_i+0x1ca>
 8001f2e:	8019      	strh	r1, [r3, #0]
 8001f30:	2300      	movs	r3, #0
 8001f32:	4615      	mov	r5, r2
 8001f34:	6123      	str	r3, [r4, #16]
 8001f36:	e7ba      	b.n	8001eae <_printf_i+0x152>
 8001f38:	682b      	ldr	r3, [r5, #0]
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	1d1a      	adds	r2, r3, #4
 8001f3e:	602a      	str	r2, [r5, #0]
 8001f40:	681d      	ldr	r5, [r3, #0]
 8001f42:	6862      	ldr	r2, [r4, #4]
 8001f44:	4628      	mov	r0, r5
 8001f46:	f000 f82f 	bl	8001fa8 <memchr>
 8001f4a:	b108      	cbz	r0, 8001f50 <_printf_i+0x1f4>
 8001f4c:	1b40      	subs	r0, r0, r5
 8001f4e:	6060      	str	r0, [r4, #4]
 8001f50:	6863      	ldr	r3, [r4, #4]
 8001f52:	6123      	str	r3, [r4, #16]
 8001f54:	2300      	movs	r3, #0
 8001f56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f5a:	e7a8      	b.n	8001eae <_printf_i+0x152>
 8001f5c:	462a      	mov	r2, r5
 8001f5e:	4649      	mov	r1, r9
 8001f60:	4640      	mov	r0, r8
 8001f62:	6923      	ldr	r3, [r4, #16]
 8001f64:	47d0      	blx	sl
 8001f66:	3001      	adds	r0, #1
 8001f68:	d0ab      	beq.n	8001ec2 <_printf_i+0x166>
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	079b      	lsls	r3, r3, #30
 8001f6e:	d413      	bmi.n	8001f98 <_printf_i+0x23c>
 8001f70:	68e0      	ldr	r0, [r4, #12]
 8001f72:	9b03      	ldr	r3, [sp, #12]
 8001f74:	4298      	cmp	r0, r3
 8001f76:	bfb8      	it	lt
 8001f78:	4618      	movlt	r0, r3
 8001f7a:	e7a4      	b.n	8001ec6 <_printf_i+0x16a>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	4632      	mov	r2, r6
 8001f80:	4649      	mov	r1, r9
 8001f82:	4640      	mov	r0, r8
 8001f84:	47d0      	blx	sl
 8001f86:	3001      	adds	r0, #1
 8001f88:	d09b      	beq.n	8001ec2 <_printf_i+0x166>
 8001f8a:	3501      	adds	r5, #1
 8001f8c:	68e3      	ldr	r3, [r4, #12]
 8001f8e:	9903      	ldr	r1, [sp, #12]
 8001f90:	1a5b      	subs	r3, r3, r1
 8001f92:	42ab      	cmp	r3, r5
 8001f94:	dcf2      	bgt.n	8001f7c <_printf_i+0x220>
 8001f96:	e7eb      	b.n	8001f70 <_printf_i+0x214>
 8001f98:	2500      	movs	r5, #0
 8001f9a:	f104 0619 	add.w	r6, r4, #25
 8001f9e:	e7f5      	b.n	8001f8c <_printf_i+0x230>
 8001fa0:	080022d7 	.word	0x080022d7
 8001fa4:	080022e8 	.word	0x080022e8

08001fa8 <memchr>:
 8001fa8:	4603      	mov	r3, r0
 8001faa:	b510      	push	{r4, lr}
 8001fac:	b2c9      	uxtb	r1, r1
 8001fae:	4402      	add	r2, r0
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	d101      	bne.n	8001fba <memchr+0x12>
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	e003      	b.n	8001fc2 <memchr+0x1a>
 8001fba:	7804      	ldrb	r4, [r0, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	428c      	cmp	r4, r1
 8001fc0:	d1f6      	bne.n	8001fb0 <memchr+0x8>
 8001fc2:	bd10      	pop	{r4, pc}

08001fc4 <memcpy>:
 8001fc4:	440a      	add	r2, r1
 8001fc6:	4291      	cmp	r1, r2
 8001fc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8001fcc:	d100      	bne.n	8001fd0 <memcpy+0xc>
 8001fce:	4770      	bx	lr
 8001fd0:	b510      	push	{r4, lr}
 8001fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001fd6:	4291      	cmp	r1, r2
 8001fd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001fdc:	d1f9      	bne.n	8001fd2 <memcpy+0xe>
 8001fde:	bd10      	pop	{r4, pc}

08001fe0 <memmove>:
 8001fe0:	4288      	cmp	r0, r1
 8001fe2:	b510      	push	{r4, lr}
 8001fe4:	eb01 0402 	add.w	r4, r1, r2
 8001fe8:	d902      	bls.n	8001ff0 <memmove+0x10>
 8001fea:	4284      	cmp	r4, r0
 8001fec:	4623      	mov	r3, r4
 8001fee:	d807      	bhi.n	8002000 <memmove+0x20>
 8001ff0:	1e43      	subs	r3, r0, #1
 8001ff2:	42a1      	cmp	r1, r4
 8001ff4:	d008      	beq.n	8002008 <memmove+0x28>
 8001ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ffa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001ffe:	e7f8      	b.n	8001ff2 <memmove+0x12>
 8002000:	4601      	mov	r1, r0
 8002002:	4402      	add	r2, r0
 8002004:	428a      	cmp	r2, r1
 8002006:	d100      	bne.n	800200a <memmove+0x2a>
 8002008:	bd10      	pop	{r4, pc}
 800200a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800200e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002012:	e7f7      	b.n	8002004 <memmove+0x24>

08002014 <_free_r>:
 8002014:	b538      	push	{r3, r4, r5, lr}
 8002016:	4605      	mov	r5, r0
 8002018:	2900      	cmp	r1, #0
 800201a:	d040      	beq.n	800209e <_free_r+0x8a>
 800201c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002020:	1f0c      	subs	r4, r1, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	bfb8      	it	lt
 8002026:	18e4      	addlt	r4, r4, r3
 8002028:	f000 f910 	bl	800224c <__malloc_lock>
 800202c:	4a1c      	ldr	r2, [pc, #112]	; (80020a0 <_free_r+0x8c>)
 800202e:	6813      	ldr	r3, [r2, #0]
 8002030:	b933      	cbnz	r3, 8002040 <_free_r+0x2c>
 8002032:	6063      	str	r3, [r4, #4]
 8002034:	6014      	str	r4, [r2, #0]
 8002036:	4628      	mov	r0, r5
 8002038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800203c:	f000 b90c 	b.w	8002258 <__malloc_unlock>
 8002040:	42a3      	cmp	r3, r4
 8002042:	d908      	bls.n	8002056 <_free_r+0x42>
 8002044:	6820      	ldr	r0, [r4, #0]
 8002046:	1821      	adds	r1, r4, r0
 8002048:	428b      	cmp	r3, r1
 800204a:	bf01      	itttt	eq
 800204c:	6819      	ldreq	r1, [r3, #0]
 800204e:	685b      	ldreq	r3, [r3, #4]
 8002050:	1809      	addeq	r1, r1, r0
 8002052:	6021      	streq	r1, [r4, #0]
 8002054:	e7ed      	b.n	8002032 <_free_r+0x1e>
 8002056:	461a      	mov	r2, r3
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	b10b      	cbz	r3, 8002060 <_free_r+0x4c>
 800205c:	42a3      	cmp	r3, r4
 800205e:	d9fa      	bls.n	8002056 <_free_r+0x42>
 8002060:	6811      	ldr	r1, [r2, #0]
 8002062:	1850      	adds	r0, r2, r1
 8002064:	42a0      	cmp	r0, r4
 8002066:	d10b      	bne.n	8002080 <_free_r+0x6c>
 8002068:	6820      	ldr	r0, [r4, #0]
 800206a:	4401      	add	r1, r0
 800206c:	1850      	adds	r0, r2, r1
 800206e:	4283      	cmp	r3, r0
 8002070:	6011      	str	r1, [r2, #0]
 8002072:	d1e0      	bne.n	8002036 <_free_r+0x22>
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4401      	add	r1, r0
 800207a:	6011      	str	r1, [r2, #0]
 800207c:	6053      	str	r3, [r2, #4]
 800207e:	e7da      	b.n	8002036 <_free_r+0x22>
 8002080:	d902      	bls.n	8002088 <_free_r+0x74>
 8002082:	230c      	movs	r3, #12
 8002084:	602b      	str	r3, [r5, #0]
 8002086:	e7d6      	b.n	8002036 <_free_r+0x22>
 8002088:	6820      	ldr	r0, [r4, #0]
 800208a:	1821      	adds	r1, r4, r0
 800208c:	428b      	cmp	r3, r1
 800208e:	bf01      	itttt	eq
 8002090:	6819      	ldreq	r1, [r3, #0]
 8002092:	685b      	ldreq	r3, [r3, #4]
 8002094:	1809      	addeq	r1, r1, r0
 8002096:	6021      	streq	r1, [r4, #0]
 8002098:	6063      	str	r3, [r4, #4]
 800209a:	6054      	str	r4, [r2, #4]
 800209c:	e7cb      	b.n	8002036 <_free_r+0x22>
 800209e:	bd38      	pop	{r3, r4, r5, pc}
 80020a0:	200000e8 	.word	0x200000e8

080020a4 <sbrk_aligned>:
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	4e0e      	ldr	r6, [pc, #56]	; (80020e0 <sbrk_aligned+0x3c>)
 80020a8:	460c      	mov	r4, r1
 80020aa:	6831      	ldr	r1, [r6, #0]
 80020ac:	4605      	mov	r5, r0
 80020ae:	b911      	cbnz	r1, 80020b6 <sbrk_aligned+0x12>
 80020b0:	f000 f8bc 	bl	800222c <_sbrk_r>
 80020b4:	6030      	str	r0, [r6, #0]
 80020b6:	4621      	mov	r1, r4
 80020b8:	4628      	mov	r0, r5
 80020ba:	f000 f8b7 	bl	800222c <_sbrk_r>
 80020be:	1c43      	adds	r3, r0, #1
 80020c0:	d00a      	beq.n	80020d8 <sbrk_aligned+0x34>
 80020c2:	1cc4      	adds	r4, r0, #3
 80020c4:	f024 0403 	bic.w	r4, r4, #3
 80020c8:	42a0      	cmp	r0, r4
 80020ca:	d007      	beq.n	80020dc <sbrk_aligned+0x38>
 80020cc:	1a21      	subs	r1, r4, r0
 80020ce:	4628      	mov	r0, r5
 80020d0:	f000 f8ac 	bl	800222c <_sbrk_r>
 80020d4:	3001      	adds	r0, #1
 80020d6:	d101      	bne.n	80020dc <sbrk_aligned+0x38>
 80020d8:	f04f 34ff 	mov.w	r4, #4294967295
 80020dc:	4620      	mov	r0, r4
 80020de:	bd70      	pop	{r4, r5, r6, pc}
 80020e0:	200000ec 	.word	0x200000ec

080020e4 <_malloc_r>:
 80020e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020e8:	1ccd      	adds	r5, r1, #3
 80020ea:	f025 0503 	bic.w	r5, r5, #3
 80020ee:	3508      	adds	r5, #8
 80020f0:	2d0c      	cmp	r5, #12
 80020f2:	bf38      	it	cc
 80020f4:	250c      	movcc	r5, #12
 80020f6:	2d00      	cmp	r5, #0
 80020f8:	4607      	mov	r7, r0
 80020fa:	db01      	blt.n	8002100 <_malloc_r+0x1c>
 80020fc:	42a9      	cmp	r1, r5
 80020fe:	d905      	bls.n	800210c <_malloc_r+0x28>
 8002100:	230c      	movs	r3, #12
 8002102:	2600      	movs	r6, #0
 8002104:	603b      	str	r3, [r7, #0]
 8002106:	4630      	mov	r0, r6
 8002108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800210c:	4e2e      	ldr	r6, [pc, #184]	; (80021c8 <_malloc_r+0xe4>)
 800210e:	f000 f89d 	bl	800224c <__malloc_lock>
 8002112:	6833      	ldr	r3, [r6, #0]
 8002114:	461c      	mov	r4, r3
 8002116:	bb34      	cbnz	r4, 8002166 <_malloc_r+0x82>
 8002118:	4629      	mov	r1, r5
 800211a:	4638      	mov	r0, r7
 800211c:	f7ff ffc2 	bl	80020a4 <sbrk_aligned>
 8002120:	1c43      	adds	r3, r0, #1
 8002122:	4604      	mov	r4, r0
 8002124:	d14d      	bne.n	80021c2 <_malloc_r+0xde>
 8002126:	6834      	ldr	r4, [r6, #0]
 8002128:	4626      	mov	r6, r4
 800212a:	2e00      	cmp	r6, #0
 800212c:	d140      	bne.n	80021b0 <_malloc_r+0xcc>
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	4631      	mov	r1, r6
 8002132:	4638      	mov	r0, r7
 8002134:	eb04 0803 	add.w	r8, r4, r3
 8002138:	f000 f878 	bl	800222c <_sbrk_r>
 800213c:	4580      	cmp	r8, r0
 800213e:	d13a      	bne.n	80021b6 <_malloc_r+0xd2>
 8002140:	6821      	ldr	r1, [r4, #0]
 8002142:	3503      	adds	r5, #3
 8002144:	1a6d      	subs	r5, r5, r1
 8002146:	f025 0503 	bic.w	r5, r5, #3
 800214a:	3508      	adds	r5, #8
 800214c:	2d0c      	cmp	r5, #12
 800214e:	bf38      	it	cc
 8002150:	250c      	movcc	r5, #12
 8002152:	4638      	mov	r0, r7
 8002154:	4629      	mov	r1, r5
 8002156:	f7ff ffa5 	bl	80020a4 <sbrk_aligned>
 800215a:	3001      	adds	r0, #1
 800215c:	d02b      	beq.n	80021b6 <_malloc_r+0xd2>
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	442b      	add	r3, r5
 8002162:	6023      	str	r3, [r4, #0]
 8002164:	e00e      	b.n	8002184 <_malloc_r+0xa0>
 8002166:	6822      	ldr	r2, [r4, #0]
 8002168:	1b52      	subs	r2, r2, r5
 800216a:	d41e      	bmi.n	80021aa <_malloc_r+0xc6>
 800216c:	2a0b      	cmp	r2, #11
 800216e:	d916      	bls.n	800219e <_malloc_r+0xba>
 8002170:	1961      	adds	r1, r4, r5
 8002172:	42a3      	cmp	r3, r4
 8002174:	6025      	str	r5, [r4, #0]
 8002176:	bf18      	it	ne
 8002178:	6059      	strne	r1, [r3, #4]
 800217a:	6863      	ldr	r3, [r4, #4]
 800217c:	bf08      	it	eq
 800217e:	6031      	streq	r1, [r6, #0]
 8002180:	5162      	str	r2, [r4, r5]
 8002182:	604b      	str	r3, [r1, #4]
 8002184:	4638      	mov	r0, r7
 8002186:	f104 060b 	add.w	r6, r4, #11
 800218a:	f000 f865 	bl	8002258 <__malloc_unlock>
 800218e:	f026 0607 	bic.w	r6, r6, #7
 8002192:	1d23      	adds	r3, r4, #4
 8002194:	1af2      	subs	r2, r6, r3
 8002196:	d0b6      	beq.n	8002106 <_malloc_r+0x22>
 8002198:	1b9b      	subs	r3, r3, r6
 800219a:	50a3      	str	r3, [r4, r2]
 800219c:	e7b3      	b.n	8002106 <_malloc_r+0x22>
 800219e:	6862      	ldr	r2, [r4, #4]
 80021a0:	42a3      	cmp	r3, r4
 80021a2:	bf0c      	ite	eq
 80021a4:	6032      	streq	r2, [r6, #0]
 80021a6:	605a      	strne	r2, [r3, #4]
 80021a8:	e7ec      	b.n	8002184 <_malloc_r+0xa0>
 80021aa:	4623      	mov	r3, r4
 80021ac:	6864      	ldr	r4, [r4, #4]
 80021ae:	e7b2      	b.n	8002116 <_malloc_r+0x32>
 80021b0:	4634      	mov	r4, r6
 80021b2:	6876      	ldr	r6, [r6, #4]
 80021b4:	e7b9      	b.n	800212a <_malloc_r+0x46>
 80021b6:	230c      	movs	r3, #12
 80021b8:	4638      	mov	r0, r7
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	f000 f84c 	bl	8002258 <__malloc_unlock>
 80021c0:	e7a1      	b.n	8002106 <_malloc_r+0x22>
 80021c2:	6025      	str	r5, [r4, #0]
 80021c4:	e7de      	b.n	8002184 <_malloc_r+0xa0>
 80021c6:	bf00      	nop
 80021c8:	200000e8 	.word	0x200000e8

080021cc <_realloc_r>:
 80021cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021d0:	4680      	mov	r8, r0
 80021d2:	4614      	mov	r4, r2
 80021d4:	460e      	mov	r6, r1
 80021d6:	b921      	cbnz	r1, 80021e2 <_realloc_r+0x16>
 80021d8:	4611      	mov	r1, r2
 80021da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021de:	f7ff bf81 	b.w	80020e4 <_malloc_r>
 80021e2:	b92a      	cbnz	r2, 80021f0 <_realloc_r+0x24>
 80021e4:	f7ff ff16 	bl	8002014 <_free_r>
 80021e8:	4625      	mov	r5, r4
 80021ea:	4628      	mov	r0, r5
 80021ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021f0:	f000 f838 	bl	8002264 <_malloc_usable_size_r>
 80021f4:	4284      	cmp	r4, r0
 80021f6:	4607      	mov	r7, r0
 80021f8:	d802      	bhi.n	8002200 <_realloc_r+0x34>
 80021fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80021fe:	d812      	bhi.n	8002226 <_realloc_r+0x5a>
 8002200:	4621      	mov	r1, r4
 8002202:	4640      	mov	r0, r8
 8002204:	f7ff ff6e 	bl	80020e4 <_malloc_r>
 8002208:	4605      	mov	r5, r0
 800220a:	2800      	cmp	r0, #0
 800220c:	d0ed      	beq.n	80021ea <_realloc_r+0x1e>
 800220e:	42bc      	cmp	r4, r7
 8002210:	4622      	mov	r2, r4
 8002212:	4631      	mov	r1, r6
 8002214:	bf28      	it	cs
 8002216:	463a      	movcs	r2, r7
 8002218:	f7ff fed4 	bl	8001fc4 <memcpy>
 800221c:	4631      	mov	r1, r6
 800221e:	4640      	mov	r0, r8
 8002220:	f7ff fef8 	bl	8002014 <_free_r>
 8002224:	e7e1      	b.n	80021ea <_realloc_r+0x1e>
 8002226:	4635      	mov	r5, r6
 8002228:	e7df      	b.n	80021ea <_realloc_r+0x1e>
	...

0800222c <_sbrk_r>:
 800222c:	b538      	push	{r3, r4, r5, lr}
 800222e:	2300      	movs	r3, #0
 8002230:	4d05      	ldr	r5, [pc, #20]	; (8002248 <_sbrk_r+0x1c>)
 8002232:	4604      	mov	r4, r0
 8002234:	4608      	mov	r0, r1
 8002236:	602b      	str	r3, [r5, #0]
 8002238:	f7fe f934 	bl	80004a4 <_sbrk>
 800223c:	1c43      	adds	r3, r0, #1
 800223e:	d102      	bne.n	8002246 <_sbrk_r+0x1a>
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	b103      	cbz	r3, 8002246 <_sbrk_r+0x1a>
 8002244:	6023      	str	r3, [r4, #0]
 8002246:	bd38      	pop	{r3, r4, r5, pc}
 8002248:	200000f0 	.word	0x200000f0

0800224c <__malloc_lock>:
 800224c:	4801      	ldr	r0, [pc, #4]	; (8002254 <__malloc_lock+0x8>)
 800224e:	f000 b811 	b.w	8002274 <__retarget_lock_acquire_recursive>
 8002252:	bf00      	nop
 8002254:	200000f4 	.word	0x200000f4

08002258 <__malloc_unlock>:
 8002258:	4801      	ldr	r0, [pc, #4]	; (8002260 <__malloc_unlock+0x8>)
 800225a:	f000 b80c 	b.w	8002276 <__retarget_lock_release_recursive>
 800225e:	bf00      	nop
 8002260:	200000f4 	.word	0x200000f4

08002264 <_malloc_usable_size_r>:
 8002264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002268:	1f18      	subs	r0, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	bfbc      	itt	lt
 800226e:	580b      	ldrlt	r3, [r1, r0]
 8002270:	18c0      	addlt	r0, r0, r3
 8002272:	4770      	bx	lr

08002274 <__retarget_lock_acquire_recursive>:
 8002274:	4770      	bx	lr

08002276 <__retarget_lock_release_recursive>:
 8002276:	4770      	bx	lr

08002278 <_init>:
 8002278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227a:	bf00      	nop
 800227c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800227e:	bc08      	pop	{r3}
 8002280:	469e      	mov	lr, r3
 8002282:	4770      	bx	lr

08002284 <_fini>:
 8002284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002286:	bf00      	nop
 8002288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800228a:	bc08      	pop	{r3}
 800228c:	469e      	mov	lr, r3
 800228e:	4770      	bx	lr
